<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Settings on Data Science | DSChloe</title>
    <link>https://dschloe.github.io/settings/</link>
    <description>Recent content in Settings on Data Science | DSChloe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 25 Apr 2025 14:00:47 +0900</lastBuildDate><atom:link href="https://dschloe.github.io/settings/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Windows 11 GPU 개발환경 설정 (ver. 2025.04)</title>
      <link>https://dschloe.github.io/settings/2025/04/windows_11_gpu_environment/</link>
      <pubDate>Fri, 25 Apr 2025 14:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/2025/04/windows_11_gpu_environment/</guid>
      <description>개요 내 PC의 GPU 환경 확인 부터 딥러닝 설치까지, Windows 11 환경에서 진행 실패 없이 한번에 설치가 되었다! 내 PC의 GPU 환경 확인 시스템 &amp;gt; 디스플레이 &amp;gt; 고급 디스플레이에서 확인 장치 관리자에서 확인 작업 관리자 &amp;gt; 성능 탭에서 확인 현재 NVIDIA GeForce RTX 4060 그래픽 카드 사용중인 것 확인 NVIDIA Driver 설치 설치 링크 : https://www.nvidia.com/en-us/drivers/ GeForce Game Ready Driver 다운로 다운로드 받은 파일 관리자 권한으로 실행 후, 다음 그림에서 OK 버튼 클릭 동의 및 계속 버튼 클릭 다음 버튼 클릭 설치 중 설치 완료 다음 화면에서 Game Ready 드라이버 선택 다음 선택 완료 CUDA Toolkit 설치 CUDA 지원, 성능, 코어 수 확인 링크 확인 : https://www.</description>
    </item>
    
    <item>
      <title>Docker 활용한 django 예제</title>
      <link>https://dschloe.github.io/settings/2025/03/docker_django_example/</link>
      <pubDate>Thu, 27 Mar 2025 04:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/2025/03/docker_django_example/</guid>
      <description>개요 Docker에서 django 개발환경 만들기 간단한 웹개발 실습 참고자료 한 권으로 배우는 도커 &amp;amp; 쿠버네티스 교재 구매 링크 : https://product.kyobobook.co.kr/detail/S000213057687 실습사전조건 가상환경으로 Ubuntu 24.04 LTS make : 소스코드를 컴파일할 때 사용하는 자동 빌드 도구이다. build-essential : C/C++ 컴파일에 필요한 기본 컴파일 도구 모음이다. libssl-dev : SSL/TLS 통신을 위한 OpenSSL 라이브러리 개발 헤더이다. zlib1g-dev : 압축 알고리즘용 zlib 라이브러리 개발 파일이다. libbz2-dev : bzip2 압축 알고리즘용 개발 라이브러리이다. libreadline-dev : 터미널에서 편리한 입력을 가능하게 하는 readline 개발 라이브러리이다.</description>
    </item>
    
    <item>
      <title>VS Code에서 가상머신 접속</title>
      <link>https://dschloe.github.io/settings/2025/03/vscode_virtual_machine_connect/</link>
      <pubDate>Sun, 23 Mar 2025 04:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/2025/03/vscode_virtual_machine_connect/</guid>
      <description>사전조건 사전에 가상 머신, VS Code는 설치가 되어 있다고 가정한다. 가상머신 네트워크 설정 Putty로 가상 머신 네트워크에 접속하는 방법 참고 : VS Code SSH 파일 설정 Extension에서 SSH 검색 후 Remote - SSH 선택 SSH Config 설정 F1 누르고 SSH 입력 메뉴들 중 Connect to Host 선택 Configure SSH Hosts 선택 .ssh\config 메뉴 선택 필자는 기존에 세팅한 옵션 확인 다음과 같이 설정 User는 가상환경 만들 때 작성했던 username이다. 즉 Computer 이름인 evan-master를 기재한다.</description>
    </item>
    
    <item>
      <title>VirtualBox 네트워크 설정하기</title>
      <link>https://dschloe.github.io/settings/2025/03/virtualbox_network_settings/</link>
      <pubDate>Sat, 22 Mar 2025 04:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/2025/03/virtualbox_network_settings/</guid>
      <description>개요 VirtualBox에서 네트워크 환경을 구축한다. Putty 프로그램을 통해 Windows 11에서 Ubuntu에 접속한다. VirtualBox 에서 네트워크 환경 구축 네트워크 관리자 선택 NAT 네트워크 탭 선택 만들기 버튼 클릭, DHCP 활성화 체크 된 상태 유지 가상환경 설정에서 네트워크 선택 (어댑터 1 선택) 가상환경 재 실행 및 포트번호 확인 inet 10.0.2.15 번호는 사용자 환경에 따라 다를 수 있음 $ ifconfig enp0s3: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt; mtu 1500 inet 10.0.2.15 netmask 255.255.255.0 broadcast 10.0.2.255 inet6 fe80::a00:27ff:fecb:782d prefixlen 64 scopeid 0x20&amp;lt;link&amp;gt; ether 08:00:27:cb:78:2d txqueuelen 1000 (Ethernet) RX packets 14 bytes 3218 (3.</description>
    </item>
    
    <item>
      <title>VirtualBox Ubuntu Desktop 24.04 설치</title>
      <link>https://dschloe.github.io/settings/2025/03/virtualbox_ubuntu_desktop_2404/</link>
      <pubDate>Fri, 21 Mar 2025 04:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/2025/03/virtualbox_ubuntu_desktop_2404/</guid>
      <description>개요 VirtualBox에서 Ubuntu Desktop 설치 윈도우-리눅스 양방햔 간 복사-붙여넣기 구현 VirtualBox Extension Pack 다운로드 VirtualBox Extension Pack : https://www.virtualbox.org/wiki/Downloads 설치 시 VirtualBox 버전과 호환되어야 함 Ubuntu Desktop 설치파일 다운로드 Ubuntu Desktop ISO : https://ubuntu.com/download/desktop VirtualBox 가상머신 만들기 확장 패키지 추가 도구 &amp;gt; 확장 패키지 관리자 선택 설치파일 불러오기 패키지 설치가 완료가 되면 다음과 같은 화면 확인 가상 머신 만들기 머신 &amp;gt; 새로 만들기 선택 ISO 이미지는 선택하지 않은 상태에서 이름 지정 이름 : master-server 종류와 Subtype, 버전은 Ubuntu 기반으로 확인 다음과 같은 화면에서 설정 클릭 일반-고급(A) 선택 후 클립보드 공유 및 드래그 앤 드롭 모두 양방향으로 선택 후 확인 시스템 선택 후 마더보드 8192MB 으로 변경 시스템 선택 후 프로세서 6으로 변경 다시 설정 클릭 후 디스플레이 선택 : 비디오 메모리 128 MB 저장소 선택 후 컨트롤러 IDE 선택-비어 있음 선택 후 부팅디스크 이미지 가져오기 다른 메뉴들은 눌러서 활성화 되어 있는지 확인 (다른 옵션에 대한 설명은 생략) 가상 머신 설치 시작 시작 버튼 클릭 가상 머신이 들어가면 새로운 창 활성화됨 화면 조정할 때 주요 단축키 참고 HOST : Ctrl + Alt 동시에 누르기 부팅디스크 로고 선택 (가끔 안 나올 때도 있음) 중요한 사항이 아니면 이미지만 확인 여기선 체크하지 않는다.</description>
    </item>
    
    <item>
      <title>Oracle 19c Installation Using Docker on M1</title>
      <link>https://dschloe.github.io/settings/2025/03/oracle_installation_19c_m1/</link>
      <pubDate>Sat, 15 Mar 2025 04:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/2025/03/oracle_installation_19c_m1/</guid>
      <description>개요 Docker 활용해서 Oracle 설치하기 on M1 SQL Developer 활용해서 접속 및 테스트하기 사전조건 Docker가 이미 설치가 되어 있다고 가정한다. Oracle Database 설치 순서 Step 01 : 도커 이미지 가져오기 Clone Oracle&amp;rsquo;s Docker Images Repository, Open your terminal and run git clone https://github.com/oracle/docker-images Step 02 : Oracle Database 19c 파일 다운로드 Download Oracle Database 19c for Linux ARM 링크 : https://www.oracle.com/database/technologies/oracle19c-linux-arm64-downloads.html (회원가입 필요) 다운로드, LINUX.ARM64_1919000_db_home.zip 해당 파일을 docker-images/OracleDatabase/SingleInstance/dockerfiles/19.3.0 디렉토리에 위치 시킴 Step 03 : 도커 이미지 빌드 Build the Docker Image, Navigate to the dockerfiles directory 터미널로 경로 이동한다.</description>
    </item>
    
    <item>
      <title>PostgreSQL 설치 on Windows 11 (2025)</title>
      <link>https://dschloe.github.io/settings/2025/03/postgresql_install_windows_2025/</link>
      <pubDate>Wed, 12 Mar 2025 04:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/2025/03/postgresql_install_windows_2025/</guid>
      <description>PostgreSQL 설치파일 다운로드 PostreSQL 설치 : https://www.postgresql.org/download/windows/ Download the installer 확인 설치 설치파일 실행 (관리자 권한) password는 evan1234 포트번호 확인 프로그램 검색 창에서 pgAdmin 4 프로그램 열기 실행되는지 확인 환경변수 설정 경로 복사 시스템 환경 변수 열기 후 복사하기 C:\Program Files\PostgreSQL\17\bin CMD나 PowerShell에서 확인 C:\Users\campus3S043&amp;gt;psql --version psql (PostgreSQL) 17.4 </description>
    </item>
    
    <item>
      <title>AWS SageMaker 개발 환경 설정 on Windows 11 (feat. Anaconda)</title>
      <link>https://dschloe.github.io/settings/2025/03/anaconda_development_settings_2025_4_aws_sagemaker/</link>
      <pubDate>Tue, 11 Mar 2025 01:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/2025/03/anaconda_development_settings_2025_4_aws_sagemaker/</guid>
      <description>개요 Anaconda 설치 (2025년 버전) Windows 11에서 설치 후 딥러닝 프레임워크 까지 개발환경 설정 다운로드 설치 파일 다운로드 : https://www.anaconda.com/download Skip Registration 버튼 선택 다음 화면에서 Download 버튼 클릭 설치파일 실행 필자는 관리자 권한으로 실행하는 것을 선호함 어떤 분은 Just Me 선택하기도 하지만, 필자는 All Users 선택 설치 경로 확인 기존에 Python이 설치가 되었더라도 Anaconda 파이썬 기준으로 테스트 할 예정이기 때문에 반드시 체크할 것 확인 버튼 클릭한다. Next 버튼 클릭 Launch Anaconda Navigator 체크박스 선택 후 Finish 버튼 선택 아래 화면이 나타나면 정상적으로 설치가 완료된 것이다.</description>
    </item>
    
    <item>
      <title>Connect to AWS via VS Code (2025 버전)</title>
      <link>https://dschloe.github.io/settings/2025/03/connect2awsviavscode/</link>
      <pubDate>Thu, 06 Mar 2025 01:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/2025/03/connect2awsviavscode/</guid>
      <description>개요 VS Code가 설치가 되어 있다고 가정한다. AWS 제품을 VS Code를 통해서 연결하도록 한다. Prerequisites VS Code requires a Windows, macOS, or Linux operating system. The AWS Toolkit for Visual Studio Code requires you to work from VS Code version 1.73.0 or a later version. AWS 회원가입 회원가입이 되어 있다면 이 부분은 생략한다. 회원가입을 진행한다. 주소 : https://signin.aws.amazon.com/signup?request_type=register 이메일 인증절차 진행 후, PW 등록한다. 연락처 정보를 입력한다. 결제 정보를 기재한다. 자격 증명 확인 Support 플랜 선택 여기서는 일단 무료로 시작한다.</description>
    </item>
    
    <item>
      <title>OpenAI Whisper 사용 위한 ffmpeg 설치</title>
      <link>https://dschloe.github.io/settings/2025/02/ffmpeg_install/</link>
      <pubDate>Sat, 08 Feb 2025 01:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/2025/02/ffmpeg_install/</guid>
      <description>개요 OpenAI의 Whisper 사용을 위해 필수적으로 설치해야 할 ffmpeg 설치 예제 각 OS별 설치 명령어 확인 Windows에서 패키지 관리자가 없을 경우 설치 방법 안내 OS별 설치 명령어 # Windows (chocolatey 사용) choco install ffmpeg # Windows (scoop 사용) scoop install ffmpeg # macOS (homebrew 사용) brew install ffmpeg # Ubuntu/Debian sudo apt update sudo apt install ffmpeg # CentOS/RHEL sudo yum install epel-release sudo yum install ffmpeg ffmpeg-devel # Fedora sudo dnf install ffmpeg ffmpeg-devel 패키지 관리자가 없을 경우 공식 웹사이트 방문 : https://ffmpeg.</description>
    </item>
    
    <item>
      <title>Google Colab &amp; Jupyter Notebook에서 dotenv 사용법</title>
      <link>https://dschloe.github.io/settings/2025/02/google_colab_jupyter_lab_dotenv/</link>
      <pubDate>Sun, 02 Feb 2025 01:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/2025/02/google_colab_jupyter_lab_dotenv/</guid>
      <description>개요 환경 변수를 코드 내에 직접 작성하는 것은 보안상 위험할 수 있다. 이를 방지하기 위해 .env 파일을 사용하여 환경 변수를 저장하고, dotenv 라이브러리를 활용해 이를 불러올 수 있다.
이번 글에서는 Google Colab 및 Jupyter Notebook에서 dotenv 사용법을 다룬다.
1. dotenv란? dotenv는 .env 파일에 저장된 환경 변수를 쉽게 로드할 수 있도록 도와주는 라이브러리이다. 이를 활용하면 API 키, 데이터베이스 접속 정보 등을 안전하게 관리할 수 있다.
Python에서는 python-dotenv을 사용한다.
2. dotenv 설치하기 Jupyter Notebook 또는 Google Colab에서 설치 !</description>
    </item>
    
    <item>
      <title>OS별 환경변수 설정 (Linux &amp; macOS / Windows)</title>
      <link>https://dschloe.github.io/settings/2025/02/environment_variables/</link>
      <pubDate>Sat, 01 Feb 2025 01:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/2025/02/environment_variables/</guid>
      <description>1. Linux &amp;amp; macOS 1.1 임시 환경변수 설정 (현재 세션에서만 유효) export 변수명=값 예)
export PATH=$PATH:/usr/local/bin export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home 위 설정은 현재 터미널 세션에서만 유효하며, 터미널을 닫으면 사라진다.
1.2 영구 환경변수 설정 (1) Bash Shell (bash 사용 시) ~/.bashrc 또는 **~/.bash_profile*에 추가
export 변수명=값 예)
export PATH=$PATH:/usr/local/bin export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home 적용:
source ~/.bashrc # 또는 source ~/.bash_profile (2) Zsh Shell (macOS 기본 Shell) ~/.zshrc 파일 수정:
export 변수명=값 예)
export PATH=$PATH:/usr/local/bin export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk-17.</description>
    </item>
    
    <item>
      <title>HuggingFace Login on Google Colab</title>
      <link>https://dschloe.github.io/settings/2025/01/googlecolab_huggingface_login/</link>
      <pubDate>Fri, 03 Jan 2025 01:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/2025/01/googlecolab_huggingface_login/</guid>
      <description>Google Colab에서 허깅페이스 로그인 개요 Google Colab에서 허깅페이스 로그인 하는 방법 기재 허깅페이스 회원가입은 이미 되어 있는 것으로 가정 허깅페이스 토큰값 가져오기 프로필 클릭 &amp;gt; Settings &amp;gt; Access Tokens &amp;gt; Create New Token 선택 Token name에 이름 입력 후, 스크롤 하단에서 Create Token 버튼 선택 토큰값 획득을 한다. Google Colab에서 허깅페이스 로그인 다음 코드 입력 후 실행 from huggingface_hub import notebook_login notebook_login() </description>
    </item>
    
    <item>
      <title>Android Studio 설치, MacOS</title>
      <link>https://dschloe.github.io/settings/2024/12/android_studio_macos/</link>
      <pubDate>Mon, 30 Dec 2024 01:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/2024/12/android_studio_macos/</guid>
      <description>개요 Android Studio를 MacOS에서 설치를 하도록 한다. 사이트 접속 사이트 : https://developer.android.com/studio 화면 중간에 Download 버튼을 클릭 후 다운로드를 진행한다.
아래 화면에서 본인 환경에 맞는 Mac을 설치한다. 필자는 Mac with Apple Chip 을 선택했다.
아래와 같은 화면에서 Android Studio를 Applications 폴더로 이동 시킨다.
Android Studio 설정 Android Studio 프로그램을 실행하면 아래와 같이 설정 부분이 나온다. Next 버튼을 누른다. 아래 화면에서 Next 버튼을 누른다. 아래 화면에서 Next 버튼을 누른다. Accept 버튼을 클릭하고 Finish 버튼을 클릭한다.</description>
    </item>
    
    <item>
      <title>Flutter 플러터 설치, MacOS M1</title>
      <link>https://dschloe.github.io/settings/2024/12/flutter_install_macos/</link>
      <pubDate>Sun, 29 Dec 2024 01:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/2024/12/flutter_install_macos/</guid>
      <description>개요 MacOS에서 Flutter를 설치한다. 사이트 접속 사이트 : Flutter https://flutter.dev/ 오른쪽 상단의 Get Started 를 선택한다. MacOS를 선택한다. 필자는 Android App 개발을 하고 싶기 때문에, Android를 선택하였다. 추가로 다음 명령어를 실행한다. sudo softwareupdate --install-rosetta --agree-to-license 스크롤을 내리면 Download and install 를 선택한다. 그리고 본인의 OS에 맞는 것을 선택한다. 필자는 M1이기 때문에 Apple Silicon 을 선택하였다. 압축받은 폴더는 압축을 푼다. 경로설정 폴더 구성은 Macintosh HD &amp;gt; 사용자 &amp;gt; 사용자명 &amp;gt; development &amp;gt; flutter로 될 것이다.</description>
    </item>
    
    <item>
      <title>Nasdaq Data Link를 활용한 데이터 수집</title>
      <link>https://dschloe.github.io/settings/2024/12/nasdaq_get_data_sample/</link>
      <pubDate>Mon, 16 Dec 2024 01:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/2024/12/nasdaq_get_data_sample/</guid>
      <description>개요 Nasdaq Data Link은 금융 및 경제 데이터를 제공하는 플랫폼으로, 특히 투자자, 연구자, 그리고 데이터 애널리스트들에게 유용 기존 quandl에서 2018년에 Nasdaq에 인수되었으며, 주식, 채권, 선물, 외환, 경제 지표 등 다양한 데이터를 제공 그러나 Free 데이터에서 유의미한 데이터를 찾기에는 부족함을 느낌 Nasdaq Data Link의 주요 기능 데이터 제공 금융 시장 데이터 (주식, 상품, 금리 등) 경제 데이터 (GDP, 실업률, 소비자 물가 지수 등) 대체 데이터 (소셜미디어 트렌드, 위성 이미지 분석, 물류 데이터 등) API 기반 접근 Python, R, Excel 등 다양한 도구에서 API를 사용해 데이터를 불러올 수 있음.</description>
    </item>
    
    <item>
      <title>Kaggle ML Submission 클래스 만들기</title>
      <link>https://dschloe.github.io/settings/2024/12/kaggle_submission_class_sample/</link>
      <pubDate>Sun, 15 Dec 2024 01:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/2024/12/kaggle_submission_class_sample/</guid>
      <description>개요 취업 준비생 들에게 필요한 캐글 연습 코드 클래스로 구현함 학습에서 제출까지 자동화하는 것에 목적을 둠 클래스에 대한 기본적인 이해가 있다는 전제하에 작성 전체 코드는 다음과 같다. import numpy as np import pandas as pd import shap import matplotlib.pyplot as plt # 데이터 처리 및 모델링 라이브러리 from sklearn.model_selection import train_test_split, cross_val_score from sklearn.preprocessing import StandardScaler, LabelEncoder, OrdinalEncoder from sklearn.impute import SimpleImputer from sklearn.metrics import ( mean_squared_error, mean_absolute_error, r2_score, mean_absolute_percentage_error ) from sklearn.</description>
    </item>
    
    <item>
      <title>Windows Microsoft C&#43;&#43; Build Tools 설정</title>
      <link>https://dschloe.github.io/settings/2024/12/windows_ms_c/</link>
      <pubDate>Tue, 10 Dec 2024 01:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/2024/12/windows_ms_c/</guid>
      <description>개요 Python 라이브러리 설치 시, 가끔 C++ 라이브러리 설치가 필요할 수 있다. 위와 같이 에러가 발생할 때 C++ 라이브러리를 설치를 한다. 설치방법 사이트 : https://visualstudio.microsoft.com/ko/visual-cpp-build-tools/ Build Tools 다운로드 버튼 클릭 후 관리자 권한으로 실행 아래와 같이 C++를 사용한 데스크톱 개발 선택 후, 설치 설치하는 데 다소 시간이 필요함 설치가 완료되면 재부팅을 한다. 파이썬 라이브러리 다시 설치 중간에 보면 cp312가 보이는데, C++을 활용해서 설치가 되었다는 것을 의미한다. </description>
    </item>
    
    <item>
      <title>Cursor AI 소개 및 설치</title>
      <link>https://dschloe.github.io/settings/2024/11/cursor_ai_installation/</link>
      <pubDate>Sun, 24 Nov 2024 01:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/2024/11/cursor_ai_installation/</guid>
      <description>웹사이트 https://www.cursor.com/ 회원가입 Settings 가격정책(Pricing) 프로그램 설치 (Windows) 기존에 Visual Studio Code가 설치가 되어 있어야 한다. 실행 또는 (관리자 권한)으로 실행 Continue 버튼 선택 Use Extensions 선택 Data Preferences는 독자 취향에 맞게 선택한다. 필자는 Help Improve Cursor를 선택한다. Login 개인 계정 확인 후, Yes, Log in 버튼 클릭 Visual Studio Code 확인 이제 Visual Studio Code에 Cursor AI가 업데이트가 되었는지 확인해본다. 그러기 위해서는, 먼저 Github에서 새로운 Repository를 하나 생성한다. 필자는 cursor_ai_project로 명명했다.</description>
    </item>
    
    <item>
      <title>Crontab으로 Git Commit Automation with sh 파일 on M1</title>
      <link>https://dschloe.github.io/settings/2024/09/m1_crontab_git_commit_automation/</link>
      <pubDate>Sat, 28 Sep 2024 01:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/2024/09/m1_crontab_git_commit_automation/</guid>
      <description>개요 Mac Crontab으로 SH 파일을 실행하도록 한다. SH 파일 작성 주요 내용은 아래와 같이 작성한다. (파일명 : deploy.sh) #!/bin/bash echo &amp;#34;Git Push Starting...&amp;#34; cd /Users/evan/Desktop/alphaco_test # Check out repo git add -A git commit -m &amp;#34;Automated commit on $(date &amp;#39;+%Y-%m-%d %H:%M:%S&amp;#39;)&amp;#34; git push 수동 업로드 수동으로 업로드 하기 위해 파일 권한을 열어준다. 777은 소유자, 그룹, 다른 모든 사용자에게 읽기, 쓰기, 실행 권한 부여하는 명령어를 말한다. chmod 777 deploy.sh 실행 해당 파일이 있는 경로에서 deploy.</description>
    </item>
    
    <item>
      <title>Oracle VM Box 양방향 복사 붙이기</title>
      <link>https://dschloe.github.io/settings/2024/05/oracle_vm_box_ubuntu_bidirect_copy/</link>
      <pubDate>Thu, 23 May 2024 01:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/2024/05/oracle_vm_box_ubuntu_bidirect_copy/</guid>
      <description>개요 VirtualBox를 통해 복사 붙이기 등을 하려고 함 사전작업 1 - 우분투 패키지 업그레이드 터미널을 열고 아래 코드를 순차적으로 입력 sudo apt update 업그레이 명령어 입력 sudo apt upgrade 사전작업 2 - 게스트 확장 설치 우선 주요 라이브러리 설치 진행 sudo apt install gcc make perl 게스트 확장 CD 이미지 삽입 메뉴 클릭 해당 디렉터리를 열고, 마우스 우클릭 &amp;gt; 터미널에서 열기 실행 ls 명령어 실행 VBoxLinuxAdditions.run 파일이 있는지 확인 ls 파일 있는 지 확인하였다면 해당 파일 실행 sudo apt install bzip2 sudo .</description>
    </item>
    
    <item>
      <title>Ubuntu install on M1</title>
      <link>https://dschloe.github.io/settings/2024/05/ubuntu_install_m1/</link>
      <pubDate>Tue, 21 May 2024 01:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/2024/05/ubuntu_install_m1/</guid>
      <description>개요 M1에서 Ubuntu를 설치하는 방법에 대해 기술한다. Ubuntu 24.04 LTS 다운로드 Ubuntu Download를 진행한다. 다운로드 받을 시, arm으로 다운로드 받아야 한다. 다른 아키텍처로 다운로드 받을 시 리눅스가 활성화가 되지 않는다. 사이트 : https://ubuntu.com/download/server/arm 최신버전의 경우 잘 되지 않을수도 있다. 따라서 22.04.04 버전으로 변경하였다. 사이트 : https://cdimage.ubuntu.com/releases/22.04.4/release/ UTM 다운로드 사이트 : https://mac.getutm.app/ UTM 가상머신 생성 UTM을 실행하면 아래와 같은 화면이 나온다. Create a New Virtual Machine을 선택한다. 아래화면에서 Virtualize를 선택한다. 아래화면에서 Linux를 선택한다.</description>
    </item>
    
    <item>
      <title>SQLitebroswer 설치 (M1, Mac)</title>
      <link>https://dschloe.github.io/settings/2024/01/sqlitebroswer_install_m1_mac/</link>
      <pubDate>Wed, 24 Jan 2024 01:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/2024/01/sqlitebroswer_install_m1_mac/</guid>
      <description>SQLitebroswer 설치 (M1, Mac) 개요 SQLitebroswer 설치를 진행해본다. 설치 주소 : https://sqlitebrowser.org/ Download 버튼을 클릭한다. 자신의 OS에 맞는 버전을 선택해 다운로드 후 설치 필자는 Apple Silicon 버전을 선택했다. 아래 그림과 같이 추가하면 된다. </description>
    </item>
    
    <item>
      <title>SQLitebroswer 설치 (Windows 11)</title>
      <link>https://dschloe.github.io/settings/2024/01/sqlitebroswer_install_windows/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/2024/01/sqlitebroswer_install_windows/</guid>
      <description>개요 SQLitebroswer 설치를 진행해본다. 설치 주소 : https://sqlitebrowser.org/ Download 버튼을 클릭한다. 자신의 OS에 맞는 버전을 선택해 다운로드 후 설치 필자는 Standard installer for 64-bit Windows 다운로드 받았다. 설치 프로그램을 실행한 후, 아래와 같이 순차적으로 실행한다. 끝.</description>
    </item>
    
    <item>
      <title>네이버 API 사용 신청 (2023 Aug)</title>
      <link>https://dschloe.github.io/settings/2023/8/naver_api/</link>
      <pubDate>Wed, 02 Aug 2023 14:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/2023/8/naver_api/</guid>
      <description>개요 크롤링을 위해 네이버 API 사용을 신청해본다. Step 01 - 사이트 접속 네이버 개발자센터 사이트에 접속한다. URL : https://developers.naver.com/main/ Step 02 - 로그인 화면 우측 상단에서 로그인을 진행한다. Step 03 - API 이용신청 및 Application 등록 상단 메뉴에서 Application 클릭 후, 내 애플리케이션을 클릭한다. 확인 버튼을 클릭한다. 이용약관에 동의한다. 계정 정보를 등록 및 휴대폰 인증을 진행한다. 애플리케이션을 등록한다. (아무이름을 작성한다) 개인 PC로 접속하기 위해 WEB 설정 - localhost를 입력한다. 사용 API는 여기에서는 간단하게 검색만 지정한다.</description>
    </item>
    
    <item>
      <title>크롬드라이버 설정 방법 - Windows (2023 Aug)</title>
      <link>https://dschloe.github.io/settings/2023/8/chrome_driver_settings_windows/</link>
      <pubDate>Tue, 01 Aug 2023 14:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/2023/8/chrome_driver_settings_windows/</guid>
      <description>개요 selenium 4.10 버전에서 크롬드라이버 설정하는 방법에 대해 기술하고자 한다. 크롬 버전 확인 크롬 버전 확인은 아래와 같이 진행한다. 먼저 설정을 클릭한다. Chrome 정보를 클릭한다. 본인의 크롬 버전을 확인한다. 크롬 드라이버 다운로드 싸이트 : https://chromedriver.chromium.org/downloads 여기에서 각 크롬버전에 맞게 들어간다. 그런데 간혹 최신버전은 빨간색 글씨 처럼 별도로 접근해 들어가야 한다. 참고 : https://googlechromelabs.github.io/chrome-for-testing/ 필자의 경우 크롬 버전은 115.0.5790.110 이지만 Status가 X로 되어 있다. 이럴 경우 115.0.5790.102 버전을 선택 한다. 위 화면에서 chromedriver를 본인 컴퓨터 OS에 맞는 것을 찾아서 다운로드 받는다.</description>
    </item>
    
    <item>
      <title>PowerShell 실행정책 Unrestricted 설정 방법</title>
      <link>https://dschloe.github.io/settings/2023/7/powershell_executionpolicy/</link>
      <pubDate>Mon, 31 Jul 2023 14:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/2023/7/powershell_executionpolicy/</guid>
      <description>개요 vagrant 가상환경 설치 중 몇몇 수강생 분들의 에러 확인 PowerShell 실행정책에 따라, 잘 안되는 것을 확인 그런데 choco 실행 전에는 아래와 같이 설정을 하라고 되어 있다. 그런데, 일부 수강생중에는 설치 시 에러가 나는 것을 확인, 따라서 이를 모두 unrestricted로 변경 후, 재 설치를 진행해본다. 이전 글 참조 : https://dschloe.github.io/settings/2023/7/window_vagrant_ubutun18_04_python/ choco 설정의 내용 재 확인 choco 공식 홈피에서 제공한대로 설정을 해본다. PS C:\Users\j2hoo&amp;gt; Get-ExecutionPolicy Restricted 위 상황에서 첫번째 명령어를 입력한다. PS C:\Users\j2hoo&amp;gt; Set-ExecutionPolicy AllSigned PS C:\Users\j2hoo&amp;gt; Get-ExecutionPolicy AllSigned 현재 전체 실행 정책 목록을 확인해본다.</description>
    </item>
    
    <item>
      <title>윈도우 우분투 가상 환경 설치 (feat.chocolatey)</title>
      <link>https://dschloe.github.io/settings/2023/7/window_vagrant_ubutun18_04_python/</link>
      <pubDate>Sun, 30 Jul 2023 14:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/2023/7/window_vagrant_ubutun18_04_python/</guid>
      <description>개요 크롤링 교재에서 윈도우에 우분투 가상 환경을 설치하는 부분이 있어서 실제로 잘 되는지 테스트를 해보았다. 향후 교재를 활용한다면, 해당 가상환경에서 진행 하는 것도 고려할 수 있다. 가상환경은 vagrant를 활용했다. 교재 파이썬을 활용한 크롤러 개발과 스크레이핑 입문 Step 01. Chocolatey 설치 윈도우에서 많이 활용되는 패키지 매니저가 바로 Chocolatey 이다. 먼저 3가지를 확인해야 한다. 첫번째 PowerShel이 설치 되어 있어야 하며, 최소 지원 버전은 3이다. PowerShell 버전 확인 PowerShell 탭을 열고 $PSVersionTable 명령어를 실행한다.</description>
    </item>
    
    <item>
      <title>가계금융복지조사 데이터 수집</title>
      <link>https://dschloe.github.io/settings/2023/2/mdis_data_load/</link>
      <pubDate>Sat, 18 Feb 2023 00:01:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/2023/2/mdis_data_load/</guid>
      <description>개요 통계청(https://mdis.kostat.go.kr/) 에서는 마이크로데이터를 제공하고 있음 해당 사이트에서 회원가입은 필수로 진행해야 한다. MDIS 다운로드 서비스 이용 2022년 기준 가계금융복지조사 데이터를 다운로드 받는다. 다운로드 서비스/소득소비자산/가계금융복지조사/가구마스터(제공)/2022년도를 아래와 같이 순차적으로 클릭한다. 다운로드받을 데이터의 형태와 해당 데이터를 입수할 때 필요한 ‘통계 툴 읽기 스크립트’를 선택한다. Python 스크립트는 제공하지 않아서, R로 선택을 한다. 위 그림에서 마이페이지를 클릭한다. </description>
    </item>
    
    <item>
      <title>Docker Streamlit Sample</title>
      <link>https://dschloe.github.io/settings/2023/2/docker_streamlit_app_windows10/</link>
      <pubDate>Wed, 15 Feb 2023 00:01:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/2023/2/docker_streamlit_app_windows10/</guid>
      <description>개요 도커를 활용하여 Streamlit 배포를 진행해본다. Dockerfile의 의미에 대해 이해한다. Dockerfile Docker 이미지를 빌드하기 위한 일련의 명령어를 포함하는 텍스트 파일 컨테이너에서 애플리케이션이 실행될 때 필요한 환경과 종속성을 정의하는 방법을 제공 패키지 설치, 파일 복사 및 환경 변수 설정 등의 지시어가 포함 사전준비 github에 sample 프로젝트를 올려둔다. 예제 : https://github.com/streamlit/streamlit-example 필자는 독립적으로 github repository를 작성했다. 소스코드 예제 소스코드는 크게 아래와 같이 작성했다. 먼저 app.py는 아래와 같다. import numpy as np import pandas as pd import matplotlib import sklearn import scipy import plotly import streamlit as st def main(): st.</description>
    </item>
    
    <item>
      <title>Docker 기본 문법</title>
      <link>https://dschloe.github.io/settings/2023/2/docker_basic/</link>
      <pubDate>Tue, 14 Feb 2023 00:01:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/2023/2/docker_basic/</guid>
      <description>무작정 도커 시작하기 docker에 Ubuntu를 설치하고 실행해본다. 현재 파일 목록들을 살펴본다. 빠져 나올 때는 EXIT를 실행한다. C:\Users\human&amp;gt;docker run -it ubuntu:18.04 Unable to find image &amp;#39;ubuntu:18.04&amp;#39; locally 18.04: Pulling from library/ubuntu 72d9f18d70f3: Pull complete Digest: sha256:a3765b4d74747b5e9bdd03205b3fbc4fa19a02781c185f97f24c8f4f84ed7bbf Status: Downloaded newer image for ubuntu:18.04 root@7a7a49e2d83e:/# ls bin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var root@7a7a49e2d83e:/# 현재 도커 컨테이너 리스트를 확인한다. $ docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 7a7a49e2d83e ubuntu:18.</description>
    </item>
    
    <item>
      <title>Git 배치파일 Windows</title>
      <link>https://dschloe.github.io/settings/2023/1/git_batchfile_windows/</link>
      <pubDate>Fri, 10 Feb 2023 00:01:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/2023/1/git_batchfile_windows/</guid>
      <description>개요 배치파일로 생성 후, 작업 스케줄러를 활용하여 자동으로 커밋을 실행하는 코드를 작성한다. 다른 예제도 같이 살펴본다. 윈도우 배치 파일 - 파이썬 가상환경 적용 배치파일 생성하기 프로젝트 폴더에 배치파일을 실행한다. 파일명은 submit.bat 로 지정했다. set root=C:\Users\human\Desktop\streamlit-predictions call git add . call git commit -m &amp;#34;updated from batch file&amp;#34; call git push 배치파일 실행하기 우선 해당 폴더에서 submit.bat 파일을 더블클릭한다. 더블 클릭하면 자동으로 배치파일이 실행되면서 해당 명령어들이 순차적으로 돌아가는 것을 확인할 수 있다.</description>
    </item>
    
    <item>
      <title>Google Analytics 4 설치 - Hugo 깃허브</title>
      <link>https://dschloe.github.io/settings/2022/11/ga4_install/</link>
      <pubDate>Sun, 27 Nov 2022 01:15:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/2022/11/ga4_install/</guid>
      <description>개요 Google Analytics 4 설치 과정을 정리하였다. 사전준비 본 글에서는 Google Analytics 4 관련 설명은 생략한다. 어느정도 관련 도구를 이해한다는 전제 조건에서 글을 정리한다. 단계별 설치 과정 단계별로 설치 과정을 알아보자. (1) GA4 추적 ID 가져오기 Google Analytics 4 에서 추적 코드를 받는다. 추적 코드는 Admin - Data Streams에서 확인이 가능하다. Add stream 에서 Hugo Website 주소를 입력한 후 설정을 하면 된다.
그럼 MEASUREMENT ID 확인이 가능하다.
G-XXXXXXX 시작하는 ID만 있으면 충분하다.</description>
    </item>
    
    <item>
      <title>윈도우 배치 파일 - 파이썬 가상환경 적용</title>
      <link>https://dschloe.github.io/settings/2022/11/windows_batch_file/</link>
      <pubDate>Mon, 21 Nov 2022 01:15:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/2022/11/windows_batch_file/</guid>
      <description>개요 Python 가상환경을 만든 후, 자동으로 배치 파일이 돌아가도록 하는 코드를 작성하도록 한다. Step 01 - 라이브러리 설치 가상환경을 만든 후, pandas 라이브러리를 설치하도록 한다. $ virtualenv venv $ ./venv/Scripts/activate 만약 에러가 아래와 에러가 생길 경우, $ .\venv\Scripts\activate .\venv\Scripts\activate : 이 시스템에서 스크립트를 실 행할 수 없으므로 C:\Users\h\Desktop\python_batch\venv\ Scripts\activate.ps1 파일을 로드할 수 없습니다. 자세한 내용은 about_Execution_Policies(https://go.microsoft. com/fwlink/?LinkID=135170)를 참조하십시오. 위치 줄:1 문자:1 + .\venv\Scripts\activate + ~~~~~~~~~~~~~~~~~~~~~~~ + CategoryInfo : 보안 오류: (:) [], PSSec uri tyException + FullyQualifiedErrorId : UnauthorizedAccess PowerShell을 관리자 권한으로 실행 후 아래 코드를 입력한다.</description>
    </item>
    
    <item>
      <title>Docker Installation in Windows</title>
      <link>https://dschloe.github.io/settings/2022/10/docker_windows/</link>
      <pubDate>Sat, 29 Oct 2022 14:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/2022/10/docker_windows/</guid>
      <description>사전 준비 WSL2가 설치가 되어 있어야 한다. 참고 : https://dschloe.github.io/settings/wsl2_install_on_windows/ 도커 설치 해당 싸이트에 접속한다. (참조 : https://www.docker.com/products/docker-desktop/) 관리자 권한으로 실행 설치가 완료가 되면 Close and Log Out 버튼이 나오면 클릭하면 윈도우 로그아웃이 진행되기 때문에, 다시 재 로그인을 하도록 한다. 아래 그림 메뉴 우측 상단에 Sign In 버튼을 클릭해 로그인을 한다. 도커 Settings 창에 들어가서 아래 그림처럼 변경후 Apply &amp;amp; Restart 버튼을 클릭한다. 테스트 PowerShell에서 도커 명령어가 실행되는지 확인한다. PS C:\Users\h&amp;gt; docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES PS C:\Users\h&amp;gt; docker --version Docker version 20.</description>
    </item>
    
    <item>
      <title>WSL2 설치 윈도우 10</title>
      <link>https://dschloe.github.io/settings/wsl2_install_on_windows/</link>
      <pubDate>Tue, 25 Oct 2022 14:40:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/wsl2_install_on_windows/</guid>
      <description>Step 0. 설정을 통해 Hyper-V 역할 활성화 Windows 기능 사용/사용 안 함 재부팅을 해야 한다. Step 1. WSL2 설치 과정 Windows PowerShell 관리자로 실행 후 다음 명령어 입력 $ dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart $ dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart 위 명령어 실행 후, 재부팅 필수 x64 머신용 최신 WSL2 Linux 커널 업데이트 패키지를 다운로드 받아 안내에 따라 설치합니다. Windows Powershell 열고 아래 코드 실행 $ wsl --set-default-version 2 WSL 2와의 주요 차이점에 대한 자세한 내용은 https://aka.</description>
    </item>
    
    <item>
      <title>Grafana 설치 및 대시보드 만들기 - 기본편</title>
      <link>https://dschloe.github.io/settings/grafana_install/</link>
      <pubDate>Sat, 20 Aug 2022 13:11:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/grafana_install/</guid>
      <description>개요 Grafana 대시보드를 다운로드 받고, 그래프를 작성한다. DB 연동을 통해 대시보드를 작성해본다. 설치 Grafana Download 사이트 : https://grafana.com/grafana/download?edition=oss&amp;amp;platform=windows 오픈소스로 다운로드 받는다. 설치가 끝난 이후에는 localhost:3000/login에 접속을 할 수 있다. Sign in 페이지가 나오면 admin을 각각 입력하면, 패스워드 변경하는 입력이 나오면 그 때 각자 본인에게 맞는 패스워드로 변경한다. 필자는 12345678로 지정했다. 첫번째 대시보드 Dashboard를 클릭한다. Add a new panel를 클릭한다. 아래 그림에서 Data source를 클릭한다. Query 탭에 Grafana를 선택한 상태에서 우측 상단의 Apply 버튼을 클릭한다.</description>
    </item>
    
    <item>
      <title>MySQL Database 생성 및 권한 부여</title>
      <link>https://dschloe.github.io/settings/mysql_database_creation/</link>
      <pubDate>Sun, 19 Jun 2022 09:30:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/mysql_database_creation/</guid>
      <description>개요 MySQL 관리자 계정인 root로 DB 관리시스템에 접속 후 DB를 생성한다. 사전준비 MySQL 설치 및 환경변수를 설정한다. 참조 : https://dschloe.github.io/settings/mysql_installation_windows11/ DB 생성 콘솔창에서 MySQL 명령을 실행한다. C:\Users\your_name&amp;gt;mysql -uroot -p Enter password: **** Welcome to the MySQL monitor. Commands end with ; or \g. Your MySQL connection id is 19 Server version: 8.0.28 MySQL Community Server - GPL Copyright (c) 2000, 2022, Oracle and/or its affiliates. Oracle is a registered trademark of Oracle Corporation and/or its affiliates.</description>
    </item>
    
    <item>
      <title>MySQL 설치 및 환경변수 설정 Windows 11</title>
      <link>https://dschloe.github.io/settings/mysql_installation_windows11/</link>
      <pubDate>Sat, 18 Jun 2022 09:30:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/mysql_installation_windows11/</guid>
      <description>개요 Windows 11에 MySQL을 설치합니다. MySQL 챗봇 시스템의 학습 데이터 관리 위해 MySQL을 사용함 설치 주소 : https://dev.mysql.com/downloads/ MySQL Installer for Windows 파일을 선택함 MSI Installer를 다운로드 받는다. 다운로드 받은 파일을 순차적으로 설치 한다. 비밀번호는 잃어버리면 안된다. (비번 : 1234) 앞서 설정한 비밀번호를 입력하고 체크 버튼을 누른다. 정상적으로 설치가 완료되었다. 윈도우에서 돋보기 모양을 누른 후, MySQL 8.0 Command Line Client를 클릭한다. root 계정 비밀번호를 입력 후 접속한다. 비밀번호 1234를 클릭한다. 환경변수 설정 환경변수 설정을 하지 않으면 cmd 명령어 창에서 mysql 명령어를 사용할 수 없다.</description>
    </item>
    
    <item>
      <title>Google Adsense with Hugo</title>
      <link>https://dschloe.github.io/settings/googleads/</link>
      <pubDate>Sun, 29 May 2022 09:30:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/googleads/</guid>
      <description>동기부여 블로그 광고수익 비교 글을 보게 되었다. 그런데, 현재 운영중인 이 블로그의 일일 방문자수가 300-400명이어서 방치하면 안될 것 같았다. 간단하게 Google Adsense를 Hugo Website에 추가하도록 한다.
사전준비 먼저 Hugo Website는 Google Analytics와 미리 연동이 되어 있어야 한다. 참조 : Hugo 블로그에 Google analytics 추가하기 Google Adsense 우선 Google Adsense에 접속한다.
Google Ads에서 아래 그림과 같이 사이트를 클릭한다. 사이트 추가 버튼을 누른다. 본인의 블로그 URL을 추가한다. HTML Tag를 복사하고, 검토 요청 버튼을 클릭한다.</description>
    </item>
    
    <item>
      <title>카카오톡 오픈 빌더 챗봇 만들기 1편</title>
      <link>https://dschloe.github.io/settings/kakaotalk_open_builder_01/</link>
      <pubDate>Sat, 30 Apr 2022 21:14:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/kakaotalk_open_builder_01/</guid>
      <description>개요 카카오톡 오픈 빌더 챗봇을 만드는 과정을 보여준다. 회원가입이 필요할 수 있다. 카카오톡 채널을 만든다. 등록하기 구글 검색창에서 카카오톡 오픈 빌더를 검색한다.. 로그인을 하도록 한다.. 챗봇 관리자센터 OBT 참여 신청 메뉴가 나오는지 확인한다. 카카오톡 채널 관리자 가입 카카오톡 관리자 채널에서 새로운 채널을 만든다.. URL : https://center-pf.kakao.com/ 아래 화면에서 새 채널 만들기를 클릭한다. 채널을 개설한다. 프로필 사진, 소개글은 추후에 작성이 가능하다. 작성이 끝나면 확인 버튼을 클릭한다. 이상이 없다면, ‘네, 입력한 정보로 개설하겠습니다.</description>
    </item>
    
    <item>
      <title>Spark Tutorial - Web UI on WSL</title>
      <link>https://dschloe.github.io/settings/spark_tutorial_web_ui/</link>
      <pubDate>Thu, 21 Apr 2022 12:30:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/spark_tutorial_web_ui/</guid>
      <description>개요 간단하게 Spark Tutorial을 활용하여 Web UI를 가동한다. Spark Submit을 활용한다. 파이썬 가상환경 파이썬 가상환경을 작성한다. (필자의 경로는 pyskt_tutorial) $ pwd /mnt/c/hadoop/pyskt_tutorial 가상환경을 생성한다. evan@evan:/mnt/c/hadoop/pyskt_tutorial$ virtualenv venv 생성된 가상환경에 접속한다. evan@evan:/mnt/c/hadoop/pyskt_tutorial$ source venv/bin/activate (venv) evan@evan:/mnt/c/hadoop/pyskt_tutorial$ PySpark 설치 pyspark를 설치한다. (venv) evan@evan:/mnt/c/hadoop/pyskt_tutorial$ pip install pyspark Requirement already satisfied: pyspark in ./venv/lib/python3.8/site-packages (3.2.1) Requirement already satisfied: py4j==0.10.9.3 in ./venv/lib/python3.8/site-packages (from pyspark) (0.10.9.3) 데이터 생성 가상의 데이터를 생성한다. 소스파일과 구분 위해 data 폴더를 만든 후, 마크다운 파일을 하나 만들 것이다.</description>
    </item>
    
    <item>
      <title>WSL2에서의 Spark 설치</title>
      <link>https://dschloe.github.io/settings/spark_install_using_wsl/</link>
      <pubDate>Tue, 19 Apr 2022 12:30:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/spark_install_using_wsl/</guid>
      <description>개요 간단하게 PySpark를 설치해보는 과정을 작성한다. WSL2 설치 방법은 다루지 않는다. 필수 파일 설치 자바 및 Spark 파일을 설치하도록 한다. $ sudo apt-get install openjdk-8-jdk $ sudo wget https://archive.apache.org/dist/spark/spark-3.2.0/spark-3.2.0-bin-hadoop3.2.tgz $ sudo tar -xvzf spark-3.2.0-bin-hadoop3.2.tgz .bashrc 파일 수정 필자의 현재 경로는 다음과 같다. evan@evan:/mnt/c/hadoop$ pwd /mnt/c/hadoop 설치한 파일은 다음과 같다. evan@evan:/mnt/c/hadoop$ ls spark-3.2.0-bin-hadoop3.2 spark-3.2.0-bin-hadoop3.2.tgz vi ~/.bashrc 파일을 열고 다음과 같이 코드를 작성한다. 다른 코드는 만지지 않는다. 가장 맨 마지막으로 내려온다. export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 export SPARK_HOME=/mnt/c/hadoop/spark-3.</description>
    </item>
    
    <item>
      <title>Hugo 깃허브 블로그 - Windows (2022)</title>
      <link>https://dschloe.github.io/settings/hugo_github_windows/</link>
      <pubDate>Sun, 17 Apr 2022 15:11:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/hugo_github_windows/</guid>
      <description>패키지 관리자 설치 Chocolatey (Windows) If you are on a Windows machine and use Chocolatey for package management, you can install Hugo with the following one-liner: 우선 PowerShell을 관리자로 실행 후, 아래와 같이 Chocolately를 설치한다. 명령어 : Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&#39;[https://community.chocolatey.org/install.ps1](https://community.chocolatey.org/install.ps1)&#39;)) Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. 새로운 크로스 플랫폼 PowerShell 사용 https://aka.ms/pscore6 PS C:\WINDOWS\system32&amp;gt; Set-ExecutionPolicy Bypass -Scope Process -Force; [System.</description>
    </item>
    
    <item>
      <title>Apache NiFi 설치와 설정 in WSL2</title>
      <link>https://dschloe.github.io/settings/apache_nifi_wsl2/</link>
      <pubDate>Tue, 12 Apr 2022 14:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/apache_nifi_wsl2/</guid>
      <description>설치 wsl2에서 JAVA 설치 한다. $ sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade $ sudo apt install openjdk-11-jre-headless $ vi ~/.bash_profile export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64 curl을 이용해서 NiFi를 현재 경로에 내려받는다. $ sudo wget https://downloads.apache.org/nifi/1.16.0/nifi-1.16.0-bin.tar.gz .tar.gz 파일의 압축을 푼다. $ sudo tar xvzf nifi-1.16.0-bin.tar.gz 압축파일을 푼 다음에는 cd nifi-1.16.0 폴더에 접속을 한다. $ cd nifi-1.16.0/bin ls를 실행해서 nifi-env.sh 파일이 있는지 확인하고 있다면, vi 에디터로 연다. .bash_profile에서 한 것처럼 동일하게 자바 환경변수를 잡아준다. $ sudo vi nifi-env.</description>
    </item>
    
    <item>
      <title>ElasticSearch &amp; Kibana 설치 in WSL2</title>
      <link>https://dschloe.github.io/settings/elasticsearch_kibana_wsl2/</link>
      <pubDate>Mon, 11 Apr 2022 11:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/elasticsearch_kibana_wsl2/</guid>
      <description>Step 1. 사전 필수 패키지 설치 우선 시스템 패키지를 업데이트 하고, HTTPS와 관련된 패키지를 설치한다. $ sudo apt update $ sudo apt install apt-transport-https 자바를 설치한다. 이미 설치가 되어 있다면 버전만 확인한다. $ sudo apt install openjdk-11-jdk 설치한 버전을 확인한다. $ java -version openjdk version &amp;#34;11.0.14.1&amp;#34; 2022-02-08 OpenJDK Runtime Environment (build 11.0.14.1+1-Ubuntu-0ubuntu1.20.04) OpenJDK 64-Bit Server VM (build 11.0.14.1+1-Ubuntu-0ubuntu1.20.04, mixed mode, sharing) 자바 환경 변수를 설정하기 위해 아래와 같이 에디터를 입력한다. $ sudo vi /etc/environment 그리고 아래와 같이 추가한다.</description>
    </item>
    
    <item>
      <title>VSCode Remote WLS 연동</title>
      <link>https://dschloe.github.io/settings/vscode_wsl2/</link>
      <pubDate>Sat, 09 Apr 2022 14:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/vscode_wsl2/</guid>
      <description>VSCode 설치 우선 VSCode를 설치한다. URL : https://code.visualstudio.com/download 이 때, 관리자로 실행할 것이기 때문에 System Installer를 다운로드 받는다. 설치 시, 환경변수 체크란만 잘 확인한다. 설치가 다 끝난 후에는 재부팅을 실시한다. Remote WSL 연동 Extension 버튼을 클릭한다. 검색창에서 Remote WSL을 검색 후, 설치를 진행한다. 모두 클릭 후, Mark Done을 선택한다. Open Folder를 클릭한다. WSL에서 설치했던 airflow-test 폴더를 선택한다. 해당 프로젝트를 열도록 한다. 메뉴바에 Terminal을 선택 후, 화면 하단에서 WSL이 있는지 확인한다. 해당 메뉴를 클릭하면 아래와 같이 터미널이 변경된 것을 확인할 수 있다.</description>
    </item>
    
    <item>
      <title>Setting up Apache-NiFi in Windows 10</title>
      <link>https://dschloe.github.io/settings/apache_nifi_installation_windows/</link>
      <pubDate>Thu, 07 Apr 2022 14:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/apache_nifi_installation_windows/</guid>
      <description>개요 윈도우에서 NiFi를 설치해본다. NiFi를 설치하기 위해서는 자바 설치가 필요하다. Step 01. NiFi 다운로드 먼저 웹사이트에 접속한다. URL : https://www.apache.org/dyn/closer.lua?path=/nifi/1.16.0/nifi-1.16.0-bin.zip /img/settings/apache_nifi_installation_windows
가장 먼저 나오는 링크를 클릭한다. URL : https://dlcdn.apache.org/nifi/1.16.0/nifi-1.16.0-bin.zip 다운로드 받은 파일의 압축을 풀도록 한다. Step 02. Java 환경 설정 Java 설치 내용은 아래 블로그를 참조한다. 참고자료 : https://maktony.tistory.com/13 Step 03. run-nifi 배치 파일 실행 run-nifi 배치파일을 관리자 권한으로 실행한다. 아래와 같은 메시지가 출력이 되면 성공한 것이다. Step 04. Web UI 확인 (약 1분이 지난 후) Web UI를 확인해본다.</description>
    </item>
    
    <item>
      <title>Setting up Apache-Airflow in Windows using WSL2</title>
      <link>https://dschloe.github.io/settings/apache_airflow_using_wsl2/</link>
      <pubDate>Wed, 06 Apr 2022 14:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/apache_airflow_using_wsl2/</guid>
      <description>개요 Windows WSL2에서 airflow를 설치한다. Step 1. Install pip on WSL airflow를 설치하기 위해 pip를 설치한다. $ sudo apt install python3-pip [sudo] password for username: Step 2. Install virtualenv package virtualenv 라이브러리를 설치한다. $ sudo pip3 install virtualenv Step 3. Create a virtual environment C드라이브에 airflow-test 폴더를 생성한다. 해당 디렉터리로 이동한다. 이제 가상환경을 생성한다. $ virtualenv venv 가상환경에 접속을 한다. $ source venv/bin/activate 이번에는 .bashrc 파일을 수정한다. $ vi ~/.bashrc 파일을 연 후, 다음과 같은 코드를 추가한다.</description>
    </item>
    
    <item>
      <title>Windows 10 도커 설치 과정 (2022 ver)</title>
      <link>https://dschloe.github.io/settings/windows_docker_install/</link>
      <pubDate>Tue, 05 Apr 2022 14:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/windows_docker_install/</guid>
      <description>개요 주요 참고자료는 다음과 같다. WSL2 설치 : https://www.lainyzine.com/ko/article/how-to-install-wsl2-and-use-linux-on-windows-10/#google_vignette 도커 설치 : https://www.lainyzine.com/ko/article/a-complete-guide-to-how-to-install-docker-desktop-on-windows-10/ Step 1. WSL2 설치 과정 Windows PowerShell 관리자로 실행 후 다음 명령어 입력 $ dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart $ dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart 위 명령어 실행 후, 재부팅 필수 x64 머신용 최신 WSL2 Linux 커널 업데이트 패키지를 다운로드 받아 안내에 따라 설치합니다. Windows Powershell 열고 아래 코드 실행 $ wsl --set-default-version 2 WSL 2와의 주요 차이점에 대한 자세한 내용은 https://aka.</description>
    </item>
    
    <item>
      <title>Hexo Blog 재연결</title>
      <link>https://dschloe.github.io/settings/hexo_blog_reconnected/</link>
      <pubDate>Fri, 26 Nov 2021 14:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/hexo_blog_reconnected/</guid>
      <description>문제점 몇몇 수강생이 노트북과 데스트탑 자리 모두에서 깃헙 블로그를 운영하고 싶어함. 또한, 기존에 올라간 블로그 소스를 그대로 사용하고 싶어함. 그런데, 제대로 반영이 안되는 경우가 있음. 해결책 그런 경우 아래와 같이 순차적으로 진행하면 된다. $ hexo init your_blog_repo # 여기는 각자 소스 레포 확인 $ cd myblog $ git init $ git remote add origin https://github.com/your_name/your_blog_repo.git # 각자 소스 레포 주소 아래 명령어에서 에러가 발생이 있다. $ git pull --set-upstream origin main # 에러 발생 그런 경우, 아래 명령어를 추가한다.</description>
    </item>
    
    <item>
      <title>Hexo Blog 이미지 추가</title>
      <link>https://dschloe.github.io/settings/hexo_img/</link>
      <pubDate>Thu, 21 Oct 2021 12:30:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/hexo_img/</guid>
      <description>Hexo 이미지 추가 Hexo 블로그 작성 시, 이미지 파일을 추가하는 방법에 대해 배운다. 주요 참고자료 Asset Folders: https://hexo.io/docs/asset-folders Asset Folders | Hexo - Static Site Generator | Tutorial 9: https://youtu.be/feIDVQ2tz0o 방법 1. Global Asset Folder 가장 간편한 방법은 source 폴더 아래 images 폴더를 별도로 만든다. 마크다운에서 아래와 같이 입력을 한다. ![](/images/image.jpg) 실제로 테스트를 해본다. (logo.md) image file: https://upload.wikimedia.org/wikipedia/commons/e/e9/Hexo-logo.png # hexo logo 테스트 - 이미지 ![](/images/Hexo-logo.png) hexo server를 실행한 뒤 결과를 확인한다.</description>
    </item>
    
    <item>
      <title>File Download VIA SSH Terminal</title>
      <link>https://dschloe.github.io/settings/csv_download_via_ssh/</link>
      <pubDate>Fri, 11 Jun 2021 09:30:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/csv_download_via_ssh/</guid>
      <description>1줄 요약 CURL 명령어는 진심 매우 좋더라. 동기부여 SQL 강의를 해야 하는데, 그에 맞는 데이터를 찾는 중이었다. SQL 예제와 함께 있는 데이터를 찾던 중, URL로 적힌 CSV 파일을 확인하였다. 이를 직접 Download로 쉽게 받을 수 있을 까 하는 생각에 구글링 몇개 해보였다. 참고자료 StackoverFlow에 다음과 같은 글을 찾았다.
URL: How to download CSV via terminal (SSH)? 참고 소스 코드는 아래와 같다.
-o, --output &amp;lt;file&amp;gt; Write output to &amp;lt;file&amp;gt; instead of stdout.</description>
    </item>
    
    <item>
      <title>pgAdmin4 GUI installation on MacOS M1</title>
      <link>https://dschloe.github.io/settings/pgadmin4/</link>
      <pubDate>Mon, 07 Jun 2021 23:15:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/pgadmin4/</guid>
      <description>pgAdmin 설치 및 서버 연결 (MacOS) GUI 프로그램을 설치해본다. Windows는 자동으로 설치가 되기 때문에 생략을 한다. 먼저 해당 싸이트에 접속을 합니다. URL: https://www.pgadmin.org/download/ macOS를 클릭한 뒤 다음 화면에서 pgAdmin 4 v5.3 최신버전을 다운로드 받도록 합니다. 프로그램을 설치하면 첫 화면에서 Password를 입력하도록 합니다. 새로운 서버를 생성하여 서버를 등록하도록 합니다. 그 후에 이름은 LocalTest라고 정합니다. 그 후에, username은 postgres를 username으로 입력하고 Postgresql을 설치할 때 설정한 password를 입력합니다. 실제 서버에 연결 되었는지 확인하도록 합니다.</description>
    </item>
    
    <item>
      <title>Postgre SQL Installation on Windows 10</title>
      <link>https://dschloe.github.io/settings/postgresql_install_windows/</link>
      <pubDate>Fri, 04 Jun 2021 07:40:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/postgresql_install_windows/</guid>
      <description>Windows PostgreSQL Downloads URL: https://www.enterprisedb.com/downloads/postgres-postgresql-downloads 각 컴퓨터에 맞는 버전을 선택합니다. 필자는 13.3 버전을 선택하였습니다.
이번에는 프로그램을 클릭하여 설치를 진행합니다. 모든 값은 default로 진행합니다.
비밀번호는 작성 후, 반드시 기억하시기를 바랍니다.
필자는 temp라고 명명하였습니다. 포트는 5432를 확인합니다. 언어는 한국어로 선택하도록 합니다. 몇번의 Next를 더 누르시면서, 설치를 진행합니다. 설치가 완료되면 Stack Builder 체크 박스는 제 후 완료를 합니다. 해 프로그램을 검색하여 PostgreSQL이 잘 설정되는지 확인을 하도록 합니다.
환경변수 추가 CMD에서 활용하려면 환경변수를 설정하도록 합니다.</description>
    </item>
    
    <item>
      <title>Postgre SQL Installation on MacOS M1</title>
      <link>https://dschloe.github.io/settings/postgresql_install/</link>
      <pubDate>Mon, 31 May 2021 07:40:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/postgresql_install/</guid>
      <description>1줄 요약 MacOS M1에서 PostgreSQL 설치에서 중요한 건 환경변수만 추가한다. M1의 구조 M1애서는 Intel, Silicon, Universal 3개의 시스템을 지원한다. 그런데, PostgreSQL 프로그램은 기본적으로 Intel 기반으로 작동을 한다. Postgre SQL 다운로드 해당 웹 페이지로 간다. (URL: https://postgresapp.com/) 다운로드 받은 후 Postgres-2.4.3-13.dmg (2021.5.31일 기준) 설치 파일을 클릭한 후, 아래 화면이 나오면, 설치를 진행합니다. 설치 진행이 완료가 되면 아래 화면에서 Initialize 또는 Start 버튼을 클릭하면 설치는 끝이 납니다. 환경변수 설정 그런데, 환경변수 설정을 하지 않으면 터미널에서 실행이 되지 않습니다.</description>
    </item>
    
    <item>
      <title>R Path Setting on MacOS</title>
      <link>https://dschloe.github.io/settings/r_path/</link>
      <pubDate>Mon, 03 May 2021 13:40:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/r_path/</guid>
      <description>1줄 요약 터미널에서 R 실행이 안된다면 PATH를 설정한다. 문제 상황 MacOS 터미널에서 R을 실행하고 싶은데, 가끔 아래와 같은 에러 메시지가 나올때가 있다. $ R bash: R: command not found 문제 해결 이는 환경설정 문제이다. 즉, 이러한 경우에는 여러 솔루션이 있다.
Ref. Running R from Mac OSX terminal 그 중에서 필자는 Fourth Solution: 선택하였다.
$ export PATH=&amp;#34;/Library/Frameworks/R.framework/Resources:$PATH&amp;#34; 그 후에 terminal에서 which R을 실행해본다. 아래와 같이 정상적으로 출력이 된다면, 환경설정은 잘 된 것이다.</description>
    </item>
    
    <item>
      <title>(Python) Defining the Encoding</title>
      <link>https://dschloe.github.io/settings/encoding/</link>
      <pubDate>Fri, 23 Apr 2021 09:30:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/encoding/</guid>
      <description>1줄 요약 공식 문서를 한번 읽어보도록 합니다. Why? 한글 사용자에게 인코딩은 언제나 어렵습니다. 한글 깨져요&amp;hellip; 그리고 파이썬의 기본 인코딩은 ASCII라 합니다. How to use 임의의 .py 파일에서 다음과 같이 시작을 합니다. #!/usr/bin/python # -*- coding: utf-8 -*- import os, sys ... 첫줄은 /usr/bin에 있는 파이썬에서 실행한다는 의미.
경로는 각자의 코드에서 수정 가능 두번째 줄은 File Encoding 형식을 지정
참조: Unicode &amp;amp; Character Encodings in Python: A Painless Guide References Defining the Encoding, https://www.</description>
    </item>
    
    <item>
      <title>Google Colab에서 Kaggle API 쉽게 사용하는 방법</title>
      <link>https://dschloe.github.io/settings/kaggle_api_easy_to_use/</link>
      <pubDate>Tue, 30 Mar 2021 16:31:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/kaggle_api_easy_to_use/</guid>
      <description>한줄 요약 귀찮지만 한 2개의 Cell은 입력후 실행하자. 개요 Google Colab에서 Kaggle을 사용하려면 보통 다음과 같은 과정을 거칩니다. 패키지 설치는 필수입니다. !pip install kaggle Requirement already satisfied: kaggle in /usr/local/lib/python3.7/dist-packages (1.5.10) Requirement already satisfied: python-dateutil in /usr/local/lib/python3.7/dist-packages (from kaggle) (2.8.1) Requirement already satisfied: six&amp;gt;=1.10 in /usr/local/lib/python3.7/dist-packages (from kaggle) (1.15.0) Requirement already satisfied: urllib3 in /usr/local/lib/python3.7/dist-packages (from kaggle) (1.24.3) Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from kaggle) (2.23.0) Requirement already satisfied: tqdm in /usr/local/lib/python3.</description>
    </item>
    
    <item>
      <title>왜 Git 그래프가 채워지지 않는가?</title>
      <link>https://dschloe.github.io/settings/git_commit_issue/</link>
      <pubDate>Mon, 29 Mar 2021 15:11:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/git_commit_issue/</guid>
      <description>1줄 요약 이메일을 확인하자. 개요 필자는 강의를 위해 깃헙 계정이 여러개가 존재함 강사용 PC에서 지속적으로 Commit을 진행했으나 Github 그래프가 출력이 되지 않는 오류 발생을 해결하는 과정에서 확인 Github 질의 Why are my contributions not showing up on my profile? 이런 글이 있습니다.
그러나, 제 경우에는 제 개인 PC는 반영이 잘 되고, 강사 PC에는 안되는 상황이어서, 맞지 않은 케이스였습니다.
왜? 공통 이유 중의 하나는 이메일 이 때, 가장 중요한 것은 이메일입니다. 사실, 해당 내용에도 나오지만, 가장 흔한 이유 중의 하나라고 합니다.</description>
    </item>
    
    <item>
      <title>Windows 10 KoNLP 설치</title>
      <link>https://dschloe.github.io/settings/konlp_issue/</link>
      <pubDate>Fri, 26 Mar 2021 14:11:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/konlp_issue/</guid>
      <description>한줄 요약 KoNLP는 여기에서 무조건 해결한다. KoNLP 이슈 R에서 텍스트 마이닝을 진행할 때에는 반드시 한번쯤은 패키지 설치로 인해 어려움을 겪는다. - R 입문자 분들이 초반에 호기롭게 시작하였다가 대부분 포기하려고 하는 지점이기도 하다. 사실, 조금 더 간편한 방법이 나오기를 기대한다. 1단계 Java 설치 및 환경 변수 설정 주의: 윈도우 10 64비트
여러 좋은 자료들이 많아서 같이 참고하기를 바란다.
Java 설치 관련: [JAVA] Windows에 자바 설치하기! 필자는 Java 8 version을 선택했다.
설치가 완료가 되면 아래 두개의 폴더가 있는지를 확인한다.</description>
    </item>
    
    <item>
      <title>Linux 기본 명령어</title>
      <link>https://dschloe.github.io/settings/linux_command/</link>
      <pubDate>Tue, 09 Mar 2021 10:11:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/linux_command/</guid>
      <description>개요 기본 문법을 다뤄봅니다. (추가적으로 올리고 싶을 때마다 정리해서 올릴 예정입니다.) unzip 만약에 여러개의 zip 파일을 받는다면 어떻게 해야할까? 다음과 같이 할 수도 있다. $ unzip a.zip b.zip c.zip d.zip 코드가 조금 길어지는 것 같다. 간단하게 하면 다음과 같이 할 수도 있다. 캐글 대회 데이터를 직접 응용하도록 한다. $ kaggle competitions download -c sf-crime Warning: Looks like you&amp;#39;re using an outdated API Version, please consider updating (server 1.5.10 / client 1.</description>
    </item>
    
    <item>
      <title>CI CD Pipeline for Data Science</title>
      <link>https://dschloe.github.io/settings/ci_cd_pipeline/</link>
      <pubDate>Tue, 02 Mar 2021 16:31:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/ci_cd_pipeline/</guid>
      <description>개요 최근 밑바닥부터 시작하는 딥러닝 3로 수업을 수강생들과 진행하며 배포에 관한 내용이 있었습니다. (p 98). 구체적인 방법은 소개하지 않아서, 보충 자료로 작성하였다. 전 단계별로 진행하는데, 깃허브에 관한 기본적인 내용 및 코드는 알고 있다는 전제하에 작성하였다. 깃허브를 처음 접하시는 분들은 Github Project 포트폴리오를 참고하기를 바란다. 필요한 것 Github: https://github.com/ Travis-CI: https://www.travis-ci.com/ Codecov: https://about.codecov.io/ PyPI: https://pypi.org/ Steps - Travis Logins Travis에 깃허브로 로그인 한다. 아래와 같은 화면이 나오면 로그인이 잘 된 것이다. 영문 내용을 잘 읽어본다.</description>
    </item>
    
    <item>
      <title>ml 개발환경 세팅</title>
      <link>https://dschloe.github.io/settings/m1_settings/</link>
      <pubDate>Thu, 21 Jan 2021 01:11:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/m1_settings/</guid>
      <description>개요 M1에서 GPU를 활용한 딥러닝을 수행하는 예제 코드를 구현해봤다.
참고: M1 tensorflow Test Preview Apple 공식 Repo대로 설치를 하면 잘 될 것이라 생각했지만, 생각지 못한 복병을 만났다.
어떻게 해결했는지 그 과정에 대해 잠깐 기술하려고 한다.
Rosetta 너는 누구니? 그동안 맥북은 인텔 기반의 Mac 프로세서를 사용해왔고, M1은 애플이 개발한 프로세서를 처음 도입한 것이다. 그런데, 이게 왜 문제가 되는 것일까? </description>
    </item>
    
    <item>
      <title>(Mac) Python 기본 환경설정 및 주피터 노트북 설치</title>
      <link>https://dschloe.github.io/settings/jupyter_notebook_mac/</link>
      <pubDate>Sun, 03 Jan 2021 00:11:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/jupyter_notebook_mac/</guid>
      <description>개요 M1 맥북을 구입 후, 환경 설정을 하다보며, 기록을 남기기로 하였다. 환경변수에 대해 살짝 다루도록 한다. Jupyter Notebook 설치를 진행해본다. Note: 아나콘다가 아닌, Python 공식홈페이지에서 다운 받은 것을 전제로 한다. 설정 1. zsh to bash 환경으로 바꾸기 필자는 zsh는 잘 쓰지 않았다. 그런데, Mac은 Default로 bash 환경을 쓴다. 써보지 않았기에, bash로 바꾸도록 한다. (쉽다!) $ chsh -s /bin/bash 위 설정을 진행한 후, 터미널을 종료한 뒤 다시 시작한다. 만약, 현재 쉘 스크립트를 알고자 하면 아래와 같은 명령어를 입력하도록 한다.</description>
    </item>
    
    <item>
      <title>Hugo Blog 옮기기</title>
      <link>https://dschloe.github.io/settings/hugo_blog/</link>
      <pubDate>Wed, 30 Dec 2020 17:11:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/hugo_blog/</guid>
      <description>개요 새로운 맥을 구입하면서 생긴 여러 에러를 해결하면서 기록으로 남겼다. 선수 학습 본 포스트는 기존 hugo 깃허브 블로그를 운영중인 독자들을 위한 글이다. 만약 깃허브 블로그를 처음 만드시는 분은 공식 홈페이지를 참조하기를 바란다. https://gohugo.io/getting-started/installing/ 기존 블로그 활용 필자는 blog라는 깃허브 repo가 존재하였음 따라서, blog 레포를 내려 받았다. $ git clone https://github.com/yourname/your_repo.git 상황 1. submodule에 대한 충분하지 못한 이해 필자가 실수한 것이 있다. github에서 submodule은 영어 단어 그대로, 서브 모듈이다. 즉, 한개의 메인 프로젝트가 존재하지만, 다른 프로젝트는 공통으로 사용할 모듈이라는 뜻이다.</description>
    </item>
    
    <item>
      <title>Git 명령어 중급편</title>
      <link>https://dschloe.github.io/settings/git_intermediate/</link>
      <pubDate>Tue, 22 Dec 2020 21:11:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/git_intermediate/</guid>
      <description>개요 커밋을 하기 전에 확인해야 할 기본적인 명령어 등을 확인해본다. tracked 상태의 파일을 untracked 상태로 변경하는데, 스테이지에 등록하는 것과 반대 과정이라고 보면 된다. stage 상태에 있는 것을 unstage 상태로 변경하려면 삭제(rm)나 리셋(reset) 명령어를 사용한다. 파일 등록 취소 rm 명령어로 삭제 하려면, 기억해야 하는 것은 스테이지 영역에서만 등록된 파일을 삭제하려면 --cached 옵션을 함께 사용한다. $ git rm --cached main.py rm &amp;#39;main.py&amp;#39; 캐시 목록에서 파일이 삭제가 된 이후에 git status를 실행해본다. $ git status On branch master Changes to be committed: (use &amp;#34;git reset HEAD &amp;lt;file&amp;gt;.</description>
    </item>
    
    <item>
      <title>Git 명령어 기본편</title>
      <link>https://dschloe.github.io/settings/git_basic/</link>
      <pubDate>Mon, 21 Dec 2020 21:11:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/git_basic/</guid>
      <description>개요 깃 명령어의 기본적인 명령어를 실행하는 것을 목표로 한다. 깃 설치 및 깃허브 설치는 기존 게시글을 확인해본다. Github Project 포트폴리오 Git 환경설정 git 명령어를 입력 시, 제대로 실행되지 않았다면 환경변수를 추가한다. 윈도우에서 제어판을 실행한 후 시스템 &amp;gt; 고급 시스템 설정 &amp;gt; 고급 &amp;gt; 환경 변수를 작성한다. 시스템 변수 항목에서 Path를 더블클릭하도록 한다. 환경 변수 편집 창에 C:\Program Files\Git\cmd 경로를 추가한다. 영상을 통해서 한번 보도록 한다. Git 기본문법 git의 명령어의 기본 문법은 아래와 같다.</description>
    </item>
    
    <item>
      <title>(Ref) Tools to Design or Visualize Architecture of Neural Network</title>
      <link>https://dschloe.github.io/settings/tools_design_for_neural_network/</link>
      <pubDate>Fri, 20 Nov 2020 14:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/tools_design_for_neural_network/</guid>
      <description>소개 항상 좋은 글을 올려주시는 존경하는 Pega님의 소개로 올려드립니다. Pega님 블로그: https://jehyunlee.github.io/ Tools to Design or Visualize Architecture of Neural Network draw_convnet : Python script for illustrating Convolutional Neural Network (ConvNet) NNSVG PlotNeuralNet : Latex code for drawing neural networks for reports and presentation. Have a look into examples to see how they are made. Additionally, lets consolidate any improvements that you make and fix any bugs to help more people with this code.</description>
    </item>
    
    <item>
      <title>(R&#43;Git) 초보자를 위한 깃허브 연동 및 에러 대처법</title>
      <link>https://dschloe.github.io/settings/rstudio_git_beginner/</link>
      <pubDate>Tue, 06 Oct 2020 09:11:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/rstudio_git_beginner/</guid>
      <description>개요 본 Repo는 강림직업전문학교 수강생을 위해 예시로 작성한 Repo입니다. 본 Repo에서는 R을 활용한 데이터 과학 발표자료를 공유하기 위해 만들어졌습니다. Git &amp;amp; Github 우선 Git을 설치합니다.
싸이트: https://git-scm.com/ 설정은 모두 기본 값으로 해주시기 바랍니다. Terimnal 창에서 git을 실행하여 정상적으로 설치되었는지 유무를 확인합니다.
그 다음은 Github에 회원가입을 합니다
저장소를 만드는 과정은 아래 싸이트를 참조바랍니다. 싸이트: https://goddaehee.tistory.com/221 이제 RStudio에서 프로젝트를 클릭한 후 아래 화면에서 Version Control을 클릭합니다.
그 다음은 github에서 주소를 클릭합니다. 복사한 주소를 아래그림과 같이 주소를 붙여 넣습니다.</description>
    </item>
    
    <item>
      <title>Global Development Resources</title>
      <link>https://dschloe.github.io/settings/resources/</link>
      <pubDate>Fri, 31 Jul 2020 10:15:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/resources/</guid>
      <description>공지 제 전공과 관련하여 주요 자료를 정리하였습니다. 데이터과학의 다양한 이론 중에서 국제개발에 적용시킬만한 내용이 무엇인지 고민하며 계속적으로 자료를 업데이트 할 예정입니다.
OECD 자료 DAC Peer Review Reference Guide 대략 5년 마다 한번씩 각 회원국들의 개발협력 정책과 사업들에 대해 면밀히 검토를 하고 있으며, 연간 6개 회원국들을 대상으로 한다. 이 때, 위 문서를 근거로 동료 평가를 시행한다. OECD Development Co-operation Peer Reviews: Korea 2018 한국어: OECD 개발협력 동료검토 Peer Reviews 대한민국 2018 UN 자료 The Sustainable Development Goals Report 2020 Project Management Project Cycle Management Project Design Matrix Logical Framework Approach </description>
    </item>
    
    <item>
      <title>Hexo Blog 만들기</title>
      <link>https://dschloe.github.io/settings/hexo_blog/</link>
      <pubDate>Mon, 13 Jul 2020 12:30:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/hexo_blog/</guid>
      <description>개요 간단하게 Hexo 블로그를 만들어 본다. I. 필수 파일 설치 1단계: nodejs.org 다운로드 설치가 완료 되었다면 간단하게 확인해본다. $ node -v 2단계: git-scm.com 다운로드 설치가 완료 되었다면 간단하게 확인해본다. $ git --version 3단계: hexo 설치 hexo는 npm을 통해서 설치가 가능하다. $ npm install -g hexo-cli II. 깃허브 설정 두개의 깃허브 Repo를 생성한다. 포스트 버전관리 (name: myblog) 포스트 배포용 관리 (name: rain0430.github.io) rain0430 대신에 각자의 username을 입력하면 된다. 이 때, myblog repo를 git clone을 통해 적당한 경로로 내려 받는다.</description>
    </item>
    
    <item>
      <title>Github Project 포트폴리오</title>
      <link>https://dschloe.github.io/settings/github_settings/</link>
      <pubDate>Tue, 07 Jul 2020 13:11:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/github_settings/</guid>
      <description>개요 본 포스트는 깃허브 프로젝트 관리에 관한 것이다. I. 프로필 작성하기 이력서에 준하는 프로필 또는 유니크한 것을 살리는 것이 좋다. 깔끔한 정장을 입고, 이쁘게 화장을 하고, 면접을 보러가듯이 인사담당자가 보는 이로 하여금 좋은 인상을 심어줘야 한다. 성명, 이메일, 전화번호 등은 가급적 자세하게 기록해두는 것이 좋다. 프로젝트는 현재 진행중인 Pinned Repositories 상위 3~4개 정도 올려 놓는 것이 좋다. 만약에 현재 기여하는 오픈 소스 리퍼지토리가 있다면 반드시 메인 화면에 고정시킨다. II. 깃허브 설치 및 연동 잔디밭은 일종의 열정과 성실함을 보여준다.</description>
    </item>
    
    <item>
      <title>Google Colab with Kaggle - Beginner</title>
      <link>https://dschloe.github.io/settings/kaggle_with_colab_beginner/</link>
      <pubDate>Wed, 17 Jun 2020 20:15:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/kaggle_with_colab_beginner/</guid>
      <description>I. 개요 데이터 시각화와 변환에 대해 짧게 익혔다면 바로 실전 데이터를 활용한다. 이론이 조금 부족하게 느껴질 수 있지만, 모든 것을 다 알려드릴 수는 없다. 결국 공부는 스스로 해야 한다. 이 강의의 목적이 Kaggle 데이터를 활용한 Python 포트폴리오 제작 강의임을 잊지 말자. II. Kaggle KPI 설치 Google Colab에서 Kaggle API를 불러오려면 다음 소스코드를 실행한다. !pip install kaggle Requirement already satisfied: kaggle in /usr/local/lib/python3.6/dist-packages (1.5.6) Requirement already satisfied: requests in /usr/local/lib/python3.6/dist-packages (from kaggle) (2.</description>
    </item>
    
    <item>
      <title>Kakao Arena 3 EDA on Google Colab</title>
      <link>https://dschloe.github.io/settings/kakao_arena_3_eda/</link>
      <pubDate>Sun, 24 May 2020 13:11:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/kakao_arena_3_eda/</guid>
      <description>공지 제 수업을 듣는 사람들이 계속적으로 실습할 수 있도록 강의 파일을 만들었습니다. 늘 도움이 되기를 바라며. 참고했던 교재 및 Reference는 꼭 확인하셔서 교재 구매 또는 관련 Reference를 확인하시기를 바랍니다.
이전 포스트인 Colab + Drive + Github Workflow 실전 테스트용으로 생각하면서 읽어주기를 바란다.
I. 개요 프로젝트 폴더 내에서 간단하게 EDA를 실습하는 시간을 갖도록 한다. 관련 패키지는 우선 다른 곳에서 설치 되었다는 것을 가정한다. 참고: Python Package Settings on Google Colab 본 포스트의 핵심은 환경설정이 Google Colab + Drive내에서 작업하는 것이다.</description>
    </item>
    
    <item>
      <title>Colab &#43; Drive &#43; Github Workflow</title>
      <link>https://dschloe.github.io/settings/colab_drive_github_settings/</link>
      <pubDate>Sun, 24 May 2020 11:11:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/colab_drive_github_settings/</guid>
      <description>공지 제 수업을 듣는 사람들이 계속적으로 실습할 수 있도록 강의 파일을 만들었습니다. 늘 도움이 되기를 바라며. 참고했던 교재 및 Reference는 꼭 확인하셔서 교재 구매 또는 관련 Reference를 확인하시기를 바랍니다.
I. 동기 부여 및 개요 Google Colab을 알게 된 이후에, 모든 파일을 가급적 여기에서 작성을 한다.
Why?
첫째, GPU를 무료로 사용할 수 있다. 둘째, 맥북에어의 저용량을 쓰는 나에게 있어, 시스템 파일 등을 Local로 내려받는데 버거움이 있다. 셋째, 온라인 강의 및 책을 협업해서 써야 하는데, 각 Local 환경을 구축하는 번거로움을 없애고 싶었다.</description>
    </item>
    
    <item>
      <title>Python Package Settings on Google Colab</title>
      <link>https://dschloe.github.io/settings/colab_package_settings/</link>
      <pubDate>Sat, 23 May 2020 21:01:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/colab_package_settings/</guid>
      <description>공지 제 수업을 듣는 사람들이 계속적으로 실습할 수 있도록 강의 파일을 만들었습니다. 늘 도움이 되기를 바라며. 참고했던 교재 및 Reference는 꼭 확인하셔서 교재 구매 또는 관련 Reference를 확인하시기를 바랍니다.
I. 개요 교육상, 최근 kaggle 및 국내 경진 대회에 참여할 일이 생겼다. 실습을 해보니, 매번 패키지와 파일을 다운로드 받는 것이 많이 불편했다. 파일을 열 때마다, !pip install name_of_package을 실행해야 하는 번거로움이 있다. 이러한 해결책으로 파이썬 패키지를 Google Colab에 영구적(Permantly)으로 설치하는 것을 실습한다.</description>
    </item>
    
    <item>
      <title>Kaggle with Google Colab</title>
      <link>https://dschloe.github.io/settings/kaggle_with_colab/</link>
      <pubDate>Wed, 20 May 2020 08:12:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/kaggle_with_colab/</guid>
      <description>공지 제 수업을 듣는 사람들이 계속적으로 실습할 수 있도록 강의 파일을 만들었습니다. 늘 도움이 되기를 바라며. 참고했던 교재 및 Reference는 꼭 확인하셔서 교재 구매 또는 관련 Reference를 확인하시기를 바랍니다.
I. 개요 Kaggle 대회에서 나오는 데이터의 용량은 작은 편은 아니다. 성능이 적은 노트북을 사용해야 하는 경우라면 Google Colab을 사용해야 한다. 이 때, Kaggle 데이터를 Google Colab으로 다운로드 받는 과정에 대해 기술 하려고 한다. II. 캐글 계정에서 해야 할 것 먼저 본인의 계정에서 API Token을 다운로드 받는다.</description>
    </item>
    
    <item>
      <title>Hugo - 이미지 위치 설정</title>
      <link>https://dschloe.github.io/settings/image_center/</link>
      <pubDate>Sat, 16 May 2020 17:20:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/image_center/</guid>
      <description>I. Problem Hugo에서 이미지를 업로드하면 자동적으로 왼쪽(Left) 정렬이 된다. 기본적으로 마크다운 내에서 html 적용은 되지 않는 문제점이 있다.
아래는 기본적인 img 업로드 방식이다. ![](/img/python/basic_syntax/numpy.png) 위 그림처럼 왼쪽으로 치우친 것을 볼 수 있다. 이럴 경우 어떻게 해결해야 할까? 간단하게 해결 방법을 정리하여 공유한다. II. CSS 파일 찾기 기본적으로 이미지를 핸들링 하는 것은 CSS 파일에서 해결한다. 문제는 어떤 CSS 파일을 열어야 하는지 처음에는 어려울 것이다. 첫째, 대부분 hugo 개발자들이 테마를 사용하기 때문에 테마에서 css 파일을 찾는다.</description>
    </item>
    
    <item>
      <title>Github에 Daily 코딩 설정</title>
      <link>https://dschloe.github.io/settings/daily_coding/</link>
      <pubDate>Sat, 09 May 2020 10:00:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/daily_coding/</guid>
      <description>I. Motivation 오늘은 데이터 분석과 크게 관련이 없는 포스팅을 해보자. 오늘 깃허브에 꾸미려고 하는 것은 아래와 같다.
주로 깃허브를 올리는 시간은 언제인가? 그저 단순 재미로 포스팅을 해본다.
II. Prep Work 첫번째, Gist를 클릭하여 활성화를 합니다. (https://gist.github.com/) 두번째, 이제 토큰을 생성하자. 이 때 중요한 것은 rest &amp;amp; gist를 클릭한 뒤 생성을 해야 한다. (https://github.com/settings/tokens/new) Note에는 토큰 생성 목적을 기재하면 된다. (필자는 Productivity Box)라고 했다. Select Scope에서 rest &amp;amp; gist를 아래 그림과 같이 클릭하자.</description>
    </item>
    
    <item>
      <title>matplotlib 한글 폰트 오류 해결</title>
      <link>https://dschloe.github.io/settings/matplotlib_koreanfont/</link>
      <pubDate>Fri, 17 Apr 2020 23:15:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/matplotlib_koreanfont/</guid>
      <description>공지 제 수업을 듣는 사람들이 계속적으로 실습할 수 있도록 강의 파일을 만들었습니다. 늘 도움이 되기를 바라며. 참고했던 교재 및 Reference는 꼭 확인하셔서 교재 구매 또는 관련 Reference를 확인하시기를 바랍니다.
도움이 되었다면 Github에 Star를 눌러주세요.
python_visualisation Matplotlib 한글폰트 오류 해결 한글을 사랑하지만, 코딩의 예외다. 프로그래밍 언어 자체가 영어기반이기 때문에 그런것도 있고, 아무튼 한글 부분이 네모 박스로 표시되면서 한글폰트가 깨지는 현상이 종종 발생한다. 오류를 해결하려면 먼저 한글폰트를 지정하는 다음의 코드를 추가해야 한다.</description>
    </item>
    
    <item>
      <title>Hugo &#43; Mathjax 설정</title>
      <link>https://dschloe.github.io/settings/mathjax/</link>
      <pubDate>Wed, 15 Apr 2020 13:40:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/mathjax/</guid>
      <description>I. 인라인 수식 에러 한동안 수식 에러를 많나 고생하였다. $$ ... $$ 코드는 잘 적용이 되었다. 그런데, 글 중간에 수식을 넣는 건 잘 되지 않았다. $ ... $ 표현하면 수식문법이 그대로 나와서 글의 가독성이 조금 떨어져 있었다. 통계수식을 넣어주면, 그냥 무언가 전문가스럽다! 전문가도 아니지만 ㅎㅎ
$x_{i}$ 내가 표현하고자 하는 것 Vs. x_{i} 실제로 화면에 나오는 것 그리고, 한동안 헤매었다. 길은 알고 있었으나, 역시 적용이 쉽지 않았다. 아래는 해결 방안을 공유한다.</description>
    </item>
    
    <item>
      <title>Connecting Jupyter Notebook to VS Code</title>
      <link>https://dschloe.github.io/settings/settings02_vscode2jupyter/</link>
      <pubDate>Sun, 05 Apr 2020 00:30:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/settings02_vscode2jupyter/</guid>
      <description>I. 개요 VS Code에 Jupyter Notebook을 연동해본다. 강사는 R &amp;amp; Python을 연동해서 작업할 일이 많다. 특히 블로그를 쓰다보면 더욱 그러한 일이 많은데, IDE가 많으면 많을수록 무언가 복잡스러워 보일 때가 많다. 이 때 좀 더 효율적으로 일하고자 하는 마음에 VS Code에 Jupyter Notebook을 추가 및 연동하는 작업을 진행해본다.
II. Installation 내용의 간결화를 위해, VS Code 및 Jupyter Notebook 설치 방법은 본 포스트에서는 생략한다.
VS Code 설치방법: https://code.visualstudio.com/download Jupyter Notebook 설치 방법: https://jupyter.</description>
    </item>
    
    <item>
      <title>Privacy Policy</title>
      <link>https://dschloe.github.io/settings/privacy/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dschloe.github.io/settings/privacy/</guid>
      <description>Who we are
Suggested text: Our website address is: https://dschloe.github.io/
​ Comments
Suggested text: When visitors leave comments on the site we collect the data shown in the comments form, and also the visitor’s IP address and browser user agent string to help spam detection.
An anonymized string created from your email address (also called a hash) may be provided to the Gravatar service to see if you are using it.</description>
    </item>
    
  </channel>
</rss>
