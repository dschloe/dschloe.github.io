<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SQLs on Data Science | DSChloe</title>
    <link>https://dschloe.github.io/sql/</link>
    <description>Recent content in SQLs on Data Science | DSChloe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 23 Apr 2025 00:40:30 +0900</lastBuildDate><atom:link href="https://dschloe.github.io/sql/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MSSQL Connect to Python (ver. 2025.04)</title>
      <link>https://dschloe.github.io/sql/2025/mssql_conn_python_202504/</link>
      <pubDate>Wed, 23 Apr 2025 00:40:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/sql/2025/mssql_conn_python_202504/</guid>
      <description>개요 SSMS에 계정 추가 계정 추가 후 Python 라이브러리 활용해서 연동 계정 추가 먼저 Security(보안) &amp;gt; Logins(로그인)에서 마우스 우클릭 진행 New Login 선택 다음 화면에서 Loing Name은 evan-tester2 명명, Password는 1234로 지정함 Default Database는 BikeStores로 지정함 Enforce password policy 체크 박스 해제 (테스트용) 왼쪽 메뉴에서 User Mapping 메뉴 선택 하단 옵션에서 db_datawriter 옵션 선택 왼쪽 메뉴에서 Server Roles 선택 dbcreator, public, sysadmin 선택 선택이 완료되었다면 OK 버튼 클릭 사용자 계정이 하나 생성된 것 확인 가능 데이터베이스 수준 역할 각 DB 수준의 역할은 공식문서 참조 : 데이터베이스 수준 역할 서버 인증 방식 변경 서버에서 마우스 우클릭 Security 선택 후, SQL Server and Windows Authentication Mode 선택 확인 후 SSMS 종료 후 재실행 SQL Server Configuration Manager 구성 아래와 같이 접속 TCP/IP 사용 SQL Server 네트워크 구성 선택 SQLEXPRESS에 대한 프로토콜 선택 후, TCP/IP 사용 변경 IP 주소, 포트 번호 지정 IPALL의 TCP 포트번호를 1433으로 지정한다.</description>
    </item>
    
    <item>
      <title>Pandas DataFrame to MySQL Database using iris Data</title>
      <link>https://dschloe.github.io/sql/2024/04/pandas_2_mysql/</link>
      <pubDate>Fri, 05 Apr 2024 16:40:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/sql/2024/04/pandas_2_mysql/</guid>
      <description>개요 이전 강의에 이어서 진행한다. (MySQL Select Clause via Python) 임의의 Pandas 데이터 프레임에서 MySQL DB로 추가하는 코드를 작성한다. 주요 라이브러리 설치 아래와 같이 주요 라이브러리를 설치한다. MySQL과 관련된 주요 Python 라이브러리를 설치한다. pip install mysql-connector mysql-connector-python pymysql SQLAlchemy seaborn pandas 코드 작성(mysql-connector) 아래와 같이 코드를 작성한다. # 파일명 : db.py import mysql.connector import pandas as pd import seaborn as sns mydb = mysql.connector.connect( host = &amp;#34;localhost&amp;#34;, user = &amp;#34;root&amp;#34;, passwd = &amp;#34;evan&amp;#34;, database = &amp;#34;muldb&amp;#34; ) print(mydb) iris_df = sns.</description>
    </item>
    
    <item>
      <title>MySQL Select Clause via Python</title>
      <link>https://dschloe.github.io/sql/2024/04/mysql_select_via_python/</link>
      <pubDate>Thu, 04 Apr 2024 20:10:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/sql/2024/04/mysql_select_via_python/</guid>
      <description>개요 이전 강의에서 출발한다. MySQL Table Creation and Insert Data via Python 데이터 조회 다음 코드를 작성한다. import mysql.connector mydb = mysql.connector.connect( host = &amp;#34;localhost&amp;#34;, user = &amp;#34;root&amp;#34;, passwd = &amp;#34;evan&amp;#34;, database = &amp;#34;mulcampdb&amp;#34; ) print(mydb) my_cursor = mydb.cursor() query = &amp;#34;&amp;#34;&amp;#34; SELECT * FROM users; &amp;#34;&amp;#34;&amp;#34; my_cursor.execute(query) result = my_cursor.fetchall() for row in result: print(row) print(&amp;#34;완료&amp;#34;) 파일을 실행한다. $ python database.py &amp;lt;mysql.connector.connection_cext.CMySQLConnection object at 0x000001FE5A985F10&amp;gt; (&amp;#39;Evan&amp;#39;, &amp;#39;Evan@gmail.com&amp;#39;, 30, 1) (&amp;#39;Evan&amp;#39;, &amp;#39;Evan@gmail.</description>
    </item>
    
    <item>
      <title>MySQL Table Creation and Insert Data via Python</title>
      <link>https://dschloe.github.io/sql/2024/04/mysql_data_insert_via_python/</link>
      <pubDate>Thu, 04 Apr 2024 18:40:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/sql/2024/04/mysql_data_insert_via_python/</guid>
      <description>개요 이전 강의에서 출발한다. Connect To Database in Python 테이블 생성 아래 코드를 작성하면 테이블이 생성된다. import mysql.connector mydb = mysql.connector.connect( host = &amp;#34;localhost&amp;#34;, user = &amp;#34;root&amp;#34;, passwd = &amp;#34;evan&amp;#34;, database = &amp;#34;mulcampdb&amp;#34; ) print(mydb) my_cursor = mydb.cursor() query = &amp;#34;&amp;#34;&amp;#34; CREATE TABLE users ( name VARCHAR(255) , email VARCHAR(255) , age INTEGER(10) , user_id INTEGER AUTO_INCREMENT PRIMARY KEY ); &amp;#34;&amp;#34;&amp;#34; my_cursor.execute(query) my_cursor.execute(&amp;#34;SHOW TABLES;&amp;#34;) for table in my_cursor: print(table[0]) 파일을 실행한다.</description>
    </item>
    
    <item>
      <title>Connect To Database in Python</title>
      <link>https://dschloe.github.io/sql/2024/04/conn_db_2_python/</link>
      <pubDate>Thu, 04 Apr 2024 10:40:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/sql/2024/04/conn_db_2_python/</guid>
      <description>개요 Python과 MySQL을 연동하도록 한다. 프로젝트 폴더에 가상환경이 설치가 되어 있는 것으로 가정한다. MySQL은 기 설치가 되어 있는 것으로 가정한다. 라이브러리 설치 Python과 MySQL을 연동해주는 라이브러리 종류는 다양하게 있다. $ pip install mysql-connector mysql-connector-python 파일 작성 간단하게 파일을 작성한다. import mysql.connector mydb = mysql.connector.connect( host = &amp;#34;localhost&amp;#34;, user = &amp;#34;root&amp;#34;, passwd = &amp;#34;evan&amp;#34; ) print(mydb) 파일을 실행한다. $ python database.py &amp;lt;mysql.connector.connection_cext.CMySQLConnection object at 0x000002BF4E606090&amp;gt; (venv) Python 코드 활용하여 DB 생성 이번에는 코드를 활용하여 Schema를 생성한다.</description>
    </item>
    
    <item>
      <title>MySQL 삭제, 재설치 가이드 on M1</title>
      <link>https://dschloe.github.io/sql/2024/04/mysql_delete_reinstall/</link>
      <pubDate>Tue, 02 Apr 2024 10:40:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/sql/2024/04/mysql_delete_reinstall/</guid>
      <description>개요 M1에서 MySQL을 설치 하고 Workbench에 접속하는 과정을 설명한다. 데이터 로드 시, ASCII 에러 과정 해결하는 방법도 살펴본다. (임시방편) 사전학습 brew 명령어를 알고 있는 분에 한해 작성을 하였다. 주의 아래 코드 복사할 시, $ 는 제외 후 복사한다. MySQL 실행 확인 후 프로세스 Kill 먼저 MySQL이 실행중인지를 확인한다. $ brew services list Name Status User File mysql started evan ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist 서비스를 강제 종료한다. $ brew services stop mysql Stopping `mysql`... (might take a while) ==&amp;gt; Successfully stopped `mysql` (label: homebrew.</description>
    </item>
    
    <item>
      <title>MySQL Workbench File Import Error in Mac</title>
      <link>https://dschloe.github.io/sql/2023/10/mysql_import_error_mac/</link>
      <pubDate>Wed, 04 Oct 2023 10:40:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/sql/2023/10/mysql_import_error_mac/</guid>
      <description>개요 MySQL Workbench에서 File을 불러올 때 에러가 발생했을 때 대처 요령을 소개한다. Workbench에서 File을 불러올 때 가끔 아래와 같은 아래가 발생하곤 한다. 해결방법은 MySQL Shell Script에서 직접 파일을 불러오는 방식이다. MySQL 재접속 기존에 Workbench에 접속해 있었다면 우선 종료를 한다. 재접속 전 Edit Connection 버튼을 클릭한다.
Advanced Tab을 클릭한다.
Others 메뉴에서 OPT_LOCAL_INFILE=1 을 입력한다. Test Connection 버튼을 클릭하여 정상적으로 접속이 되는지 재 확인한다. 이제 재 접속을 하면 Workbench의 설정은 완료가 되었다. Schema 및 Table 생성 마우스 우클릭 후 스키마를 생성한다.</description>
    </item>
    
    <item>
      <title>MySQL Workbench ERD - 1</title>
      <link>https://dschloe.github.io/sql/2023/09/mysql_workbench_erd/</link>
      <pubDate>Fri, 15 Sep 2023 11:00:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/sql/2023/09/mysql_workbench_erd/</guid>
      <description>개요 MySQL Workbench를 통해 ERD 작업을 수행하도록 한다. Step 1 - 메뉴 선택 상단 메뉴에서 Database &amp;gt; Reverse Engineer 를 선택한다. Step 2 - Reverse Engineer Database Next 버튼을 클릭한다. Step 3 - Connect to MySQL Server 팝업창에서 root 또는 사용자 비밀번호 입력 후, 확인 버튼을 누르면 아래와 같이 연결이 될 것이다. Step 4 - Schema 선택 classicmodels 스키마를 선택한다. Step 4 - Connect to MySQL Server 비밀번호를 입력한다. Step 5 - 순차적으로 버튼 선택 Next 버튼을 클릭한다.</description>
    </item>
    
    <item>
      <title>MySQL Error Code 1175 해결</title>
      <link>https://dschloe.github.io/sql/2023/09/mysql_error_code_1175/</link>
      <pubDate>Thu, 14 Sep 2023 17:00:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/sql/2023/09/mysql_error_code_1175/</guid>
      <description>개요 Delete 문법을 진행하는데, 아래와 같은 에러가 발생하였다. 옵션 설정을 변경하여 코드를 재실행한다. Safe Mode 끄기 아래 코드를 실행한다. SET SQL_SAFE_UPDATES = 0; Edit &amp;gt; Preferences &amp;gt; SQL Editor &amp;gt; Other 에서 Safe Updates 체크되어 있는 것을 삭제한다. 코드 재 실행 Delete 코드를 재 실행한다. DELETE FROM tasks WHERE start_date = DATE(&amp;#39;2023-09-14&amp;#39;); 정상적으로 Delete 코드가 실행된 것을 확인할 수 있다. </description>
    </item>
    
    <item>
      <title>MySQL 실습 데이터 추가</title>
      <link>https://dschloe.github.io/sql/2023/09/mysql_data_insert/</link>
      <pubDate>Thu, 14 Sep 2023 10:40:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/sql/2023/09/mysql_data_insert/</guid>
      <description>개요 강의를 위한 CSV 파일을 Workbench를 통해 업로드를 하도록 한다. 교재 판매처 : https://www.yes24.com/Product/Goods/86544423 Workbench 접속 Local instance MySQL을 클릭한다. 최초 설치 진행시 진행한 password를 입력한다. 로그인한 화면은 아래와 같다. Sample 데이터 다운로드 사이트 : https://www.mysqltutorial.org/mysql-sample-database.aspx Download MySQL Sample Database를 클릭하여 다운로드 받는다. 압축파일을 풀면 아래와 같이 mysqlsampledatabase.sql 파일을 확인하다. 쿼리 불러오기 MySQL Workbench을 열고 File &amp;gt; Open SQL Script를 클릭한다. mysqlsampledatabase.sql 파일을 연다. 번개 모양의 아이콘을 클릭하면 쿼리가 실행된다. 좌측 메뉴바에서 Schemas 탭을 클릭 후, 새로고침을 한다.</description>
    </item>
    
    <item>
      <title>MySQL 설치 (윈도우 11 기반)</title>
      <link>https://dschloe.github.io/sql/2023/09/my_sql_install_windows11/</link>
      <pubDate>Wed, 13 Sep 2023 11:40:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/sql/2023/09/my_sql_install_windows11/</guid>
      <description>개요 MySQL 설치를 진행한다. MySQL 다운로드 사이트 : https://dev.mysql.com/downloads/windows/installer/8.0.html 위 화면에서 2번째를 선택한다. 선택 시, 로그인을 해야 하는 상황이 올수도 있다. 회원 가입 후, 재 진행 한다. 다음 화면에서 Download Now버튼을 클릭한다. MySQL 설치 다운로드 설치 프로그램을 실행한다. 아래 메뉴에서 선택적으로 설치가 가능하다. 여기에서는 Full 을 선택하고 설치를 진행하도록 한다. Execute 버튼을 클릭하여 설치를 진행한다. Next 버튼을 클릭한다. 포트 번호 (3306)를 기억한다. 간단하게 접속을 진행하기 위해 두번째 메뉴 선택 후, Next 버튼을 클릭한다.</description>
    </item>
    
    <item>
      <title>MySQL 완전 삭제 (윈도우 11 기반)</title>
      <link>https://dschloe.github.io/sql/2023/09/mysql_delete_windows11/</link>
      <pubDate>Wed, 13 Sep 2023 11:40:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/sql/2023/09/mysql_delete_windows11/</guid>
      <description>개요 기 설치된 MySQL을 완전 삭제하도록 한다. MySQL은 제어판 및 프로그램 제거를 통해서 삭제가 되지 않고, 이런 상태에서 제거할 경우, 재 설치 시 에러가 발생할 가능성이 높음 프로그램 추가 / 제거 MySQL과 관련된 모든 프로그램을 삭제한다. appdata에서 MySQL 폴더 삭제 window 버튼 + R을 누른 후, 아래와 같이 %appdata% 입력 후 확인 버튼을 클릭한다. MySQL 폴더를 삭제한다. ProgramData에서 MySQL 관련 폴더 삭제 Windows + R 실행 후, %ProgramData% 입력 후 확인 버튼을 누른다.</description>
    </item>
    
    <item>
      <title>GROUP BY 1의 의미와 사용법 예제</title>
      <link>https://dschloe.github.io/sql/2022/12/groupby_1/</link>
      <pubDate>Thu, 22 Dec 2022 14:40:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/sql/2022/12/groupby_1/</guid>
      <description>개요 GROUP BY 1의 구체적인 의미에 대해 파악을 한다. 데이터 개요 주어진 데이터는 아래와 같다. 이 데이터는 미국의 과거 및 현재 국회의원 데이터셋을 사용한다. 참조 : https://github.com/unitedstates/congress-legislators SELECT * FROM legislators_terms; 쿼리 예제 다음 쿼리는 리텐션을 구하는 쿼리를 작성하기 위해 작성했다. 먼저, 각 의원이 첫 임기를 시작한 날짜를 first_term으로 정의한다. SELECT id_bioguide , MIN(term_start) AS first_term FROM legislators_terms GROUP BY 1; GROUP BY 1 대신에 GROUP BY id_bioguide로 변경하여 코드를 작성해본다.</description>
    </item>
    
    <item>
      <title>Excel with MySQL 연동</title>
      <link>https://dschloe.github.io/sql/excel_with_mysql/</link>
      <pubDate>Sun, 09 Oct 2022 14:40:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/sql/excel_with_mysql/</guid>
      <description>개요 엑셀 VBA 강의 중 Excel에서 MySQL DB와 연동하는 방법 의뢰를 받음 엑셀은 MySQL과 연결이 (생각보다) 매우 쉽게 할 수 있도록 설계 되어 있었음 사전준비 MySQL 설치 과정은 다음 자료를 참고한다. https://hongong.hanbit.co.kr/mysql-다운로드-및-설치하기mysql-community-8-0/ 버전 확인 먼저 필자는 윈도우 11에서 작업중임 필자의 엑셀 정보는 아래와 같음 [계정] - [Excel 정보] 클릭하면 아래와 같음 필자의 MySQL 정보는 아래와 같음 필수 설치 프로그램 다운로드 및 설치 https://www.microsoft.com/ko-kr/download/details.aspx?id=48217 에 접속 후 다운로드 받은 후 설치를 진행한다.</description>
    </item>
    
    <item>
      <title>Oracle CSV File Upload using CMD</title>
      <link>https://dschloe.github.io/sql/oracle_csv_upload/</link>
      <pubDate>Fri, 22 Jul 2022 14:40:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/sql/oracle_csv_upload/</guid>
      <description>개요 iris.csv 파일을 오라클 명령어를 통해서 업로드를 진행한다. 대부분의 명령어는 터미널에서 처리하였다. SQLPLUS 접속 SQL에 접속한다. 테이블 생성 터미널에서 iris 테이블을 생성한다. CREATE TABLE iris ( sepal_length INTEGER, sepal_width INTEGER, petal_length INTEGER, petal_width INTEGER, species varchar2(20) ); ctl 파일 생성 메모장에 아래와 같이 ctl 파일을 생성한다. 파일명은 control.ctl이다. LOAD DATA INFILE &amp;#39;iris.csv&amp;#39; INTO TABLE iris fields terminated by &amp;#39;,&amp;#39; ( sepal_length, sepal_width, petal_length, petal_width, species ) 파일 업로드 sqlplus 접속을 종료한다.</description>
    </item>
    
    <item>
      <title>Visual Studio Code Oracle 연동</title>
      <link>https://dschloe.github.io/sql/vscode_oracle/</link>
      <pubDate>Tue, 26 Apr 2022 00:10:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/sql/vscode_oracle/</guid>
      <description>개요 VSCode에서 오라클을 연동하는 코드를 작성해본다. Extension Extension에서 Oracle을 검색 후, 설치를 진행한다. 설치 중간에 아래와 같은 문구가 나오면 해당 파일을 설치해야 한다. 필수 설치 파일 설치 URL은 다음과 같다. URL : https://www.oracle.com/database/technologies/appdev/dotnet/install-dotnetcore-windows.html 위 그림에서 Install .NET Runtime for Windows x64를 클릭하면 아래 화면과 함께 설치 파일이 다운로드 된다. 설치 파일을 클릭하면 아래와 같은 설치 관리자가 등장한다. 특별하게 고려할 것은 없다. 정상적으로 설치가 되면 아래와 같은 화면이 나오면 설치는 종료가 된 것이다.</description>
    </item>
    
    <item>
      <title>PyCharm Oracle 연동</title>
      <link>https://dschloe.github.io/sql/pycharm_oracle/</link>
      <pubDate>Mon, 25 Apr 2022 14:40:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/sql/pycharm_oracle/</guid>
      <description>개요 PyCharm에서 Oracle과 연동하는 방법에 대해 작성한다. Database Navigator 설치 Project 폴더에서 File - Settings - Plugins를 실행한다. 검색창에 Database를 입력한다. Database Navigator를 선택한다. 설치가 완료되면, Restart IDE 창이 활성화가 될 것이다. PyCharm을 재 시작한다. DB Navigator 실행 상단 메뉴창에서 DB Navigator를 선택한다. 새로운 데이터베이스 버튼을 클릭한 후, Oracle을 선택한다. 필수 입력값을 입력 한 후, Test Connection을 실행하여 정상적으로 연동이 되었는지 확인한다. SQL 테스트 이제 새로운 파일을 열고 쿼리 테스트를 진행해본다.</description>
    </item>
    
    <item>
      <title>SQL Developer with Git</title>
      <link>https://dschloe.github.io/sql/sql_developer_git/</link>
      <pubDate>Sun, 24 Apr 2022 10:40:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/sql/sql_developer_git/</guid>
      <description>개요 SQL Developer에서 깃헙과 연동하는 방법을 알려준다. 깃허브 회원가입 및 깃 설치는 이미 된 것으로 가정한다. 새로운 Repository를 만든다. 필자는 oracle_lectures라는 Repository를 만들었다. SQL Developer에서 필요한 작업 이제 SQL Developer 프로그램을 연다. 팀 - Git - 복제 순으로 순차적으로 연다. 아래 화면에서 다음을 클릭한다. 아래 화면에서 새로 생성한 URL, Username, Password를 순차적으로 입력한다. 이 때, Repo 생성 시, Private으로 되어 있었다면 인증 에러가 생길 수 있다. 그런 경우 Public으로 변경한다. 아래 화면에서 main을 선택 후, 다음을 클릭한다.</description>
    </item>
    
    <item>
      <title>오라클 19c 기본 세팅</title>
      <link>https://dschloe.github.io/sql/oracle_basic_settings/</link>
      <pubDate>Sat, 23 Apr 2022 14:40:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/sql/oracle_basic_settings/</guid>
      <description>1단계 sqlplus 실행하기 설치가 끝난 후, 윈도우에서 sqlplus 입력 사용자명은 system, 비밀번호는 오라클 설치 시 (1234)] 주의 : 관리자로 실행 2단계 : 테이블스페이스 생성하기 테이블스페이스는 myts라는 이름으로 100MB 크기로 생성 만약 데이터가 증가하면 5MB씩 자동 증가 옵션 추가 생성 구문은 다음과 같음 SQL&amp;gt; CREATE TABLESPACE myts DATAFILE &amp;#39;C:\oracle\oradata\MYORACLE\myts.dbf&amp;#39; SIZE 100M AUTOEXTEND ON NEXT 5M; 테이블스페이스가 생성되었습니다. 3단계 : 사용자 생성 사용자를 생성하는 코드를 작성한다. SQL&amp;gt; CREATE USER ora_user IDENTIFIED BY evan DEFAULT TABLESPACE MYTS TEMPORARY TABLESPACE TEMP; 사용자가 생성되었습니다.</description>
    </item>
    
    <item>
      <title>오라클 삭제 - Windows</title>
      <link>https://dschloe.github.io/sql/oracle_deinstallation/</link>
      <pubDate>Fri, 22 Apr 2022 14:40:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/sql/oracle_deinstallation/</guid>
      <description>개요 오라클 설치가 제대로 안되는 경우가 왕왕 있다. 이럴 경우, 삭제 후 재설치하는 것을 권장한다. 1단계 : 오라클 서비스 중지시키기 제어판 - 시스템 및 보안 - 관리도구 - 서비스 메뉴를 실행해 Oracle로 시작되는 모든 서비를 중지시킨다. 또는 윈도우 검색창에서 서비스를 검색해도 앱에 접근할 수 있다. 2단계 : 삭제 시동 파일 실행하기 오라클 설치 폴더 - deinstall 폴더에서 deinstall.bat 파일을 관리자 권한으로 실행한다. 이름 목록 지정화면에서 설치 시 지정했던 전역데이터베이스 이름을 입력하고, 계속하겠습니까?</description>
    </item>
    
    <item>
      <title>PostgreSQL Installation on WSL2 and Windows</title>
      <link>https://dschloe.github.io/sql/postgreslq_wsl2/</link>
      <pubDate>Sun, 10 Apr 2022 14:40:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/sql/postgreslq_wsl2/</guid>
      <description>개요 WSL2에서 PostgreSQL을 설치한다. pgAdmin은 Windows에 설치한다. 터미널 업그레이드 먼저 WSL 터미널을 열고, Ubuntu 패키지를 모두 업데이트 및 업그레이드를 한다. $ sudo apt update [sudo] password for evan: Hit:1 https://artifacts.elastic.co/packages/7.x/apt stable InRelease Get:2 http://security.ubuntu.com/ubuntu focal-security InRelease [114 kB] Hit:3 http://archive.ubuntu.com/ubuntu focal InRelease Get:4 http://archive.ubuntu.com/ubuntu focal-updates InRelease [114 kB] Get:5 http://archive.ubuntu.com/ubuntu focal-backports InRelease [108 kB] Get:6 http://archive.ubuntu.com/ubuntu focal-updates/main amd64 Packages [1712 kB] Get:7 http://archive.ubuntu.com/ubuntu focal-updates/universe amd64 Packages [916 kB] Fetched 2963 kB in 5s (600 kB/s) Reading package lists.</description>
    </item>
    
    <item>
      <title>Python과 Oracle 연동</title>
      <link>https://dschloe.github.io/sql/python_oracle/</link>
      <pubDate>Fri, 16 Jul 2021 00:40:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/sql/python_oracle/</guid>
      <description>개요 파이참에서 가상환경을 만들어 오라클 연동 예제를 작성한다. 아나콘다, 파이참, 그리고 오라클 설치는 생략한다. 1. 가상환경 활성화 cmd 창에서 가상 환경을 세팅 하도록 한다. (권장: 관리자 실행) 바탕화면에 필자는 python_oracle 폴더를 생성했다. 현재 경로는 아래와 같다. C:\Users\1\Desktop\python_oracle&amp;gt; 먼저 가상환경을 만든다. conda create --name your_env_name python=3.8 . . done # # To activate this environment, use # # $ conda activate python_oracle # # To deactivate an active environment, use # # $ conda deactivate your_env_name 대신 다른 이름으로 설정해도 된다.</description>
    </item>
    
    <item>
      <title>PostgreSQL 기초 1</title>
      <link>https://dschloe.github.io/sql/db_creation_01/</link>
      <pubDate>Sun, 04 Jul 2021 00:40:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/sql/db_creation_01/</guid>
      <description>개요 psql shell 명령어를 간단히 배우도록 한다. Database, Schema, Table를 생성하도록 한다. 데이터타입에 대해 배우도록 한다. psql Shell 명령어 명령어 설명 \q psql을 종료한다. \l 데이터베이스를 조회한다. \c 입력한 DB로 이동한다. \e 외부편집기로 sql 쿼리 입력 가능 \dt 현재 DB에서 테이블을 확인할 수 있음. 자주 사용하는 명령어이기 때문에 확인한다. DB 및 Table 다루기 콘솔창에서 book 이름의 DB를 생성한다. evan=# CREATE DATABASE book; CREATE DATABASE 그 후, book에 접속한다. evan=# \c book You are now connected to database &amp;#34;book&amp;#34; as user &amp;#34;evan&amp;#34;.</description>
    </item>
    
    <item>
      <title>PostgreSQL 테이블 생성 예제</title>
      <link>https://dschloe.github.io/sql/table_creation_01/</link>
      <pubDate>Wed, 09 Jun 2021 00:40:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/sql/table_creation_01/</guid>
      <description>테이블 생성 및 수정 삭제 pgAdmin4을 활용한 테이블 수정 삭제 Schemas에서 public-Table 마우스 오른쪽 버튼을 누른 뒤 Query Tool을 선택합니다. developers 테이블을 별도로 생성합니다. CREATE TABLE developers ( book_id INTEGER, date DATE, name VARCHAR(80) ) CREATE TABLE Query returned successfully in 65 msec. 이번에는 값을 입력하도록 합니다. INSERT INTO developers VALUES(1, &amp;#39;2019-12-17&amp;#39;, &amp;#39;&amp;#34;자바&amp;#34;&amp;#39;) 그런데, 작은 따옴표(&amp;rsquo;)를 넣고 싶을 때는 큰 따옴표(&amp;quot;)로 깜사면, 에러가 발생이 됩니다. INSERT INTO developers VALUES(2, &amp;#39;2019-12-17&amp;#39;, &amp;#34;&amp;#39;자바&amp;#39;&amp;#34;) ERROR: 오류: &amp;#34;&amp;#39;자바&amp;#39;&amp;#34; 이름의 칼럼은 없습니다 LINE 1: INSERT INTO developers VALUES(1, &amp;#39;2019-12-17&amp;#39;, &amp;#34;&amp;#39;자바&amp;#39;&amp;#34;) ^ SQL state: 42703 Character: 48 이런 경우에는 작은 따옴표를 두번 입혀서 깜사도록 합니다.</description>
    </item>
    
  </channel>
</rss>
